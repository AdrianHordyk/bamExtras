# Chunk 5
ylim <- range(c(0,rdat_BS$t.series$B,rdat_RP$t.series$B))
with(rdat_BS$t.series,
plot(year,B,type="o",col="black",ylim=ylim)
)
with(rdat_RP$t.series,
points(year,B,type="o",col="red")
)
# Chunk 6
#install.packages("MSEtool")
library(MSEtool)
# Chunk 7
Stock_BS <- rdat_to_Stock(rdat_BS)
Fleet_BS <- rdat_to_Fleet(rdat_BS)
# Chunk 8
OM_BS <- new("OM", Stock=Stock_BS, Fleet=Fleet_BS, Obs=Precise_Unbiased, Imp=Perfect_Imp)
# Chunk 9
MSE_BS <- runMSE(OM_BS)
NOAA_plot(MSE_BS)
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Chunk 2
# Install and load package
#devtools::install_github("nikolaifish/bamExtras")
library(bamExtras)
# Load dependencies
library(stringr)
# Chunk 3
# see all data objects in bamExtras
# data(package="bamExtras")$result[,"Item"]
# standardize naming conventions and assign shorter name
rdat_BS <- standardize_rdat(rdat_BlackSeaBass)
rdat_RP <- standardize_rdat(rdat_RedPorgy)
# Chunk 4
with(rdat_BS$t.series,
plot(year,B,type="o",col="black"))
# Chunk 5
ylim <- range(c(0,rdat_BS$t.series$B,rdat_RP$t.series$B))
with(rdat_BS$t.series,
plot(year,B,type="o",col="black",ylim=ylim)
)
with(rdat_RP$t.series,
points(year,B,type="o",col="red")
)
# Chunk 6
#install.packages("MSEtool")
library(MSEtool)
# Chunk 7
Stock_RP <- rdat_to_Stock(rdat_RP)
Fleet_RP <- rdat_to_Fleet(rdat_RP)
# Chunk 8
OM_RP <- new("OM", Stock=Stock_RP, Fleet=Fleet_RP, Obs=Precise_Unbiased, Imp=Perfect_Imp)
# Chunk 9
MSE_RP <- runMSE(OM_RP)
# Chunk 10
NOAA_plot(MSE_RP)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width = 7,
warnings = FALSE,
errors = FALSE,
messages = FALSE
)
?opts_chunk
setwd("~/GitHub/InterimAnalysis/SEFSCInterimAnalysis/RunMSE")
# Chunk 1: setup
rm(list=ls())
knitr::opts_chunk$set(comment=NA,echo=FALSE,message=FALSE,warning=FALSE,fig.height=8,fig.width=6)
library(Hmisc)
library(knitr)
library(latex2exp) # lets you use TeX() function to convert latex equations to R expressions for plotting
library(stringr)
# Chunk 2: user
OM_Names_user <- c("OM_BlackSeaBass","OM_SnowyGrouper","OM_VermilionSnapper",
"OM_RedPorgy","OM_GoldenTilefish","OM_Cobia")
# Chunk 3: functions
# coefficient of variation
CV <- function(x,na.rm=TRUE){
sd(x,na.rm=na.rm)/mean(x,na.rm=na.rm)
}
# geometric mean
# Note that this will fail when x is a large value. exp(mean(log(x))) works better but can't handle negative values
GM <- function(x,na.rm=TRUE){
if(na.rm){x <- as.numeric(na.omit(x))}
prod(x)^(1/length(x))
}
VB.L <- function(Linf,K,t0,a,ageProp=0)  {Linf*(1-exp(-K*(a+ageProp-t0))) }   # VB age to L
mat_L50_L95 <- function(L,L50,L95){
r <- log((1-0.95)/0.95)/(L50-L95)
P <- 1/(1+exp(-r*(L-L50)))
return(P)
}
# Chunk 4: data
# Read in data for operating models
for(file.i in list.files("OM")){
assign(gsub(".rds","",file.i),readRDS(file.path("OM",file.i)))
}
if(is.null(OM_Names_user)){
OM_Names <- gsub(".rds","",list.files("OM"))
}else{
OM_Names <- OM_Names_user
}
speciesNames <- gsub("OM_","",OM_Names)
OM_nsim <- c()
for(OM_Name_i in OM_Names){
i <- which(OM_Names==OM_Name_i)
OM_i <- get(OM_Name_i)
nsim_i <- OM_i@nsim
OM_nsim <- c(OM_nsim,nsim_i)
}
nsim_text <- combine_words(unique(OM_nsim),and=" or ")
# Read in results
for(file.i in list.files("MSE_obj")){
assign(paste(gsub(".rds","",file.i),"out",sep="_"),readRDS(file.path("MSE_obj",file.i)))
}
# Chunk 5: plot data
# Figure 1 from Huynh et al (2020)
plot_LH <- function(OM,...){
maxage <- OM@maxage
agebins <- 1:maxage
lenbins <- VB.L(Linf=OM@Linf[1],K=OM@K[1],t0=OM@t0[1],a=agebins)
Plenbins <- lenbins/max(lenbins)
Mat_age <- OM@cpars$Mat_age[1,,1] # Maturity at age
V <- OM@cpars$V[1,,1] # Vulnerability (selectivity) at age
plot(agebins,Plenbins,ylim=c(0,1),type="l",lwd=3,...)
points(agebins,Mat_age,type="l",lwd=3,lty=2)
points(agebins,V,type="l",lwd=3,lty=3)
}
par(mfrow=c(3,1),mgp=c(1,0.2,0),mar=c(1.5,2,1.5,1),oma=c(1,2,1,1),tck=-0.01)
for(OM_Name_i in OM_Names){
i <- which(OM_Names==OM_Name_i)
OM_i <- get(OM_Name_i)
speciesName_i <- gsub("OM_","",OM_Name_i)
plot_LH(OM_i,xlab="",ylab="",main=speciesName_i)
if(i==1){
legend("bottomright",legend=c("Rel. length","Maturity","Vulnerability"),lwd=c(3,3,3),lty=c(1,2,3),bty="n")
}
if(i==length(OM_Names)){
mtext("Value",2,0,outer = TRUE)
}
}
scenNames <- c("base","hs","hd","dep","lf","epiM")
MPNamesSub <- c("SCA_10","SCA_1","iMP_avg_10","iMP_buffer_10")
MPNamesSub_legtext <- c("Fixed\nTAC (10)", "Annual\nassessment","Averaged\nIndex (10)", "Buffered\nIndex (10)")
MSEoutNames <- paste(rep(OM_Names,each=length(scenNames)),
rep(scenNames,length(OM_Names)),
"out",
sep="_")
colLabs <- speciesNames
rowLabs <- c("Base","Hyper-stable","Hyper-deplete","Depleted","Lightly fished","Episodic M")
xlim <- c(0,50)
cols <- setNames(c("red","black","deepskyblue2","deepskyblue2"),MPNamesSub)
ltys <- setNames(c(1,1,1,2),MPNamesSub)
lwds <- setNames(c(3,3,3,3),MPNamesSub)
types <- setNames(c("l","l","l","l"),MPNamesSub)
colLabsAll <- as.character(matrix(c(colLabs,rep("",length(MSEoutNames)-length(colLabs))),ncol=length(colLabs),byrow=TRUE))
rowLabsAll <- as.character(matrix(c(rep("",length(MSEoutNames)-length(rowLabs)),rowLabs),nrow=length(rowLabs),byrow=FALSE))
colLabs
# Figure 2: Mean BS/BSmsy
myvarName <- "SSB"
ylabel <- expression(Mean~~B^S/B[MSY]^S)
ylim <- c(0,2)
assessmentYears <- seq(10,40,by=10)
x.at <- c(0,25,50)
y.at <- c(0,1,2)
layout(matrix(c(1:6,19,7:12,19,13:18,19), ncol=3, byrow=FALSE), heights=c(rep(1,6),0.75))
par(mgp=c(1,0.2,0),mar=c(0,0,0,0),oma=c(1,4,3,3),tck=-0.01,xpd=TRUE,xaxs="i",yaxs="i")
for(outName_i in MSEoutNames){
topPanels <- (length(scenNames)*(seq_along(OM_Names)-1)+1)
bottomPanels <- length(scenNames)*seq_along(OM_Names)
leftPanels <- seq_along(scenNames)
rightPanels <- tail(seq_along(MSEoutNames),length(scenNames))
i <- which(MSEoutNames==outName_i)
out_i <- get(outName_i)
MPNames <- out_i@MPs
myvar <- slot(out_i,myvarName)
SSBMSY <- slot(out_i,"OM")$SSBMSY
myvar <- myvar/SSBMSY # Scale myvar (catch by SSBMSY)
myvarsub <- myvar[,match(MPNamesSub,MPNames),]
myvarsubMeans <- apply(myvarsub,2,function(x){apply(x,2,mean)})
dimnames(myvarsubMeans) <- list(1:nrow(myvarsubMeans),MPNamesSub)
xaxt_i <- ifelse(i%in%bottomPanels,"n","n")
yaxt_i <- ifelse(i%in%leftPanels,"n","n")
matplot(rownames(myvarsubMeans),myvarsubMeans,
col=cols,lty=ltys,lwd=lwds,type=types,
xaxt=xaxt_i,yaxt=yaxt_i,
xlim=xlim,ylim=ylim,xlab="",ylab="")
title(main=colLabsAll[i],line=1)
# grid(col="black")
points(par("usr")[1:2],c(1,1),type="l",lty="1111",lwd=1)
abline(v=assessmentYears,lty="1111",lwd=1)
if(i%in%topPanels){
col.ct <- which(topPanels==i)
mtext(colLabsAll[i],side=3,line=1,outer=TRUE,adj=c(0.15,0.5,0.97)[col.ct],font=2)
}
if(i%in%bottomPanels){
x.at.i <- x.at
if(i>bottomPanels[1]){x.at.i <- x.at[-1]}
axis(side=1,at=x.at.i)
}
if(i%in%leftPanels){
y.at.i <- y.at
if(i>leftPanels[1]){y.at.i <- y.at[1:(length(y.at)-1)]}
axis(side=2,at=y.at.i)
}
if(i%in%rightPanels){
row.ct <- which(rightPanels==i)
rowcenter <-par("usr")[3]+diff(par("usr")[3:4])/2
text(x=par("usr")[2]*1.05,y=rowcenter,rowLabsAll[i],
srt=-90,xpd=NA,font=2)
}
}
mtext(ylabel,side=2,line=1.5,outer=TRUE)
mtext("Management year",side=1,line=1.5,outer=FALSE,adj=-4)
plot.new()
o <- c(2,3,4,1) # Order to plot legend elements
legend("bottom",horiz=TRUE,bty="n",
legend=MPNamesSub_legtext[o],
col=cols[o],lty=ltys[o],lwd=lwds[o]
)
i
MSEoutNames
c(1:6,19,7:12,19,13:18,19)
length(c(1:6,19,7:12,19,13:18,19))
length(MSEoutNames)
source("~/.active-rstudio-document", echo=TRUE)
# Chunk 1: setup
rm(list=ls())
knitr::opts_chunk$set(comment=NA,echo=FALSE,message=FALSE,warning=FALSE,fig.height=8,fig.width=6)
library(Hmisc)
library(knitr)
library(latex2exp) # lets you use TeX() function to convert latex equations to R expressions for plotting
library(stringr)
# Chunk 2: user
OM_Names_user <- c("OM_BlackSeaBass","OM_SnowyGrouper","OM_VermilionSnapper",
"OM_RedPorgy","OM_GoldenTilefish","OM_Cobia")
# Chunk 3: functions
# coefficient of variation
CV <- function(x,na.rm=TRUE){
sd(x,na.rm=na.rm)/mean(x,na.rm=na.rm)
}
# geometric mean
# Note that this will fail when x is a large value. exp(mean(log(x))) works better but can't handle negative values
GM <- function(x,na.rm=TRUE){
if(na.rm){x <- as.numeric(na.omit(x))}
prod(x)^(1/length(x))
}
VB.L <- function(Linf,K,t0,a,ageProp=0)  {Linf*(1-exp(-K*(a+ageProp-t0))) }   # VB age to L
mat_L50_L95 <- function(L,L50,L95){
r <- log((1-0.95)/0.95)/(L50-L95)
P <- 1/(1+exp(-r*(L-L50)))
return(P)
}
# Chunk 4: data
# Read in data for operating models
for(file.i in list.files("OM")){
assign(gsub(".rds","",file.i),readRDS(file.path("OM",file.i)))
}
if(is.null(OM_Names_user)){
OM_Names <- gsub(".rds","",list.files("OM"))
}else{
OM_Names <- OM_Names_user
}
speciesNames <- gsub("OM_","",OM_Names)
OM_nsim <- c()
for(OM_Name_i in OM_Names){
i <- which(OM_Names==OM_Name_i)
OM_i <- get(OM_Name_i)
nsim_i <- OM_i@nsim
OM_nsim <- c(OM_nsim,nsim_i)
}
nsim_text <- combine_words(unique(OM_nsim),and=" or ")
# Read in results
for(file.i in list.files("MSE_obj")){
assign(paste(gsub(".rds","",file.i),"out",sep="_"),readRDS(file.path("MSE_obj",file.i)))
}
# Chunk 5: plot data
# Figure 1 from Huynh et al (2020)
plot_LH <- function(OM,...){
maxage <- OM@maxage
agebins <- 1:maxage
lenbins <- VB.L(Linf=OM@Linf[1],K=OM@K[1],t0=OM@t0[1],a=agebins)
Plenbins <- lenbins/max(lenbins)
Mat_age <- OM@cpars$Mat_age[1,,1] # Maturity at age
V <- OM@cpars$V[1,,1] # Vulnerability (selectivity) at age
plot(agebins,Plenbins,ylim=c(0,1),type="l",lwd=3,...)
points(agebins,Mat_age,type="l",lwd=3,lty=2)
points(agebins,V,type="l",lwd=3,lty=3)
}
par(mfrow=c(3,1),mgp=c(1,0.2,0),mar=c(1.5,2,1.5,1),oma=c(1,2,1,1),tck=-0.01)
for(OM_Name_i in OM_Names){
i <- which(OM_Names==OM_Name_i)
OM_i <- get(OM_Name_i)
speciesName_i <- gsub("OM_","",OM_Name_i)
plot_LH(OM_i,xlab="",ylab="",main=speciesName_i)
if(i==1){
legend("bottomright",legend=c("Rel. length","Maturity","Vulnerability"),lwd=c(3,3,3),lty=c(1,2,3),bty="n")
}
if(i==length(OM_Names)){
mtext("Value",2,0,outer = TRUE)
}
}
# Chunk 6: plot results setup
scenNames <- c("base","hs","hd","dep","lf","epiM")
MPNamesSub <- c("SCA_10","SCA_1","iMP_avg_10","iMP_buffer_10")
MPNamesSub_legtext <- c("Fixed\nTAC (10)", "Annual\nassessment","Averaged\nIndex (10)", "Buffered\nIndex (10)")
MSEoutNames <- paste(rep(OM_Names,each=length(scenNames)),
rep(scenNames,length(OM_Names)),
"out",
sep="_")
colLabs <- speciesNames
rowLabs <- c("Base","Hyper-stable","Hyper-deplete","Depleted","Lightly fished","Episodic M")
xlim <- c(0,50)
cols <- setNames(c("red","black","deepskyblue2","deepskyblue2"),MPNamesSub)
ltys <- setNames(c(1,1,1,2),MPNamesSub)
lwds <- setNames(c(3,3,3,3),MPNamesSub)
types <- setNames(c("l","l","l","l"),MPNamesSub)
colLabsAll <- as.character(matrix(c(colLabs,rep("",length(MSEoutNames)-length(colLabs))),ncol=length(colLabs),byrow=TRUE))
rowLabsAll <- as.character(matrix(c(rep("",length(MSEoutNames)-length(rowLabs)),rowLabs),nrow=length(rowLabs),byrow=FALSE))
# Chunk 7: plot Figure 2
# Figure 2: Mean BS/BSmsy
myvarName <- "SSB"
ylabel <- expression(Mean~~B^S/B[MSY]^S)
ylim <- c(0,2)
assessmentYears <- seq(10,40,by=10)
x.at <- c(0,25,50)
y.at <- c(0,1,2)
layout(matrix(c(1:6,19,7:12,19,13:18,19), ncol=3, byrow=FALSE), heights=c(rep(1,6),0.75))
par(mgp=c(1,0.2,0),mar=c(0,0,0,0),oma=c(1,4,3,3),tck=-0.01,xpd=TRUE,xaxs="i",yaxs="i")
for(outName_i in MSEoutNames[1:18]){
topPanels <- (length(scenNames)*(seq_along(OM_Names)-1)+1)
bottomPanels <- length(scenNames)*seq_along(OM_Names)
leftPanels <- seq_along(scenNames)
rightPanels <- tail(seq_along(MSEoutNames),length(scenNames))
i <- which(MSEoutNames==outName_i)
out_i <- get(outName_i)
MPNames <- out_i@MPs
myvar <- slot(out_i,myvarName)
SSBMSY <- slot(out_i,"OM")$SSBMSY
myvar <- myvar/SSBMSY # Scale myvar (catch by SSBMSY)
myvarsub <- myvar[,match(MPNamesSub,MPNames),]
myvarsubMeans <- apply(myvarsub,2,function(x){apply(x,2,mean)})
dimnames(myvarsubMeans) <- list(1:nrow(myvarsubMeans),MPNamesSub)
xaxt_i <- ifelse(i%in%bottomPanels,"n","n")
yaxt_i <- ifelse(i%in%leftPanels,"n","n")
matplot(rownames(myvarsubMeans),myvarsubMeans,
col=cols,lty=ltys,lwd=lwds,type=types,
xaxt=xaxt_i,yaxt=yaxt_i,
xlim=xlim,ylim=ylim,xlab="",ylab="")
title(main=colLabsAll[i],line=1)
# grid(col="black")
points(par("usr")[1:2],c(1,1),type="l",lty="1111",lwd=1)
abline(v=assessmentYears,lty="1111",lwd=1)
if(i%in%topPanels){
col.ct <- which(topPanels==i)
mtext(colLabsAll[i],side=3,line=1,outer=TRUE,adj=c(0.15,0.5,0.97)[col.ct],font=2)
}
if(i%in%bottomPanels){
x.at.i <- x.at
if(i>bottomPanels[1]){x.at.i <- x.at[-1]}
axis(side=1,at=x.at.i)
}
if(i%in%leftPanels){
y.at.i <- y.at
if(i>leftPanels[1]){y.at.i <- y.at[1:(length(y.at)-1)]}
axis(side=2,at=y.at.i)
}
if(i%in%rightPanels){
row.ct <- which(rightPanels==i)
rowcenter <-par("usr")[3]+diff(par("usr")[3:4])/2
text(x=par("usr")[2]*1.05,y=rowcenter,rowLabsAll[i],
srt=-90,xpd=NA,font=2)
}
}
mtext(ylabel,side=2,line=1.5,outer=TRUE)
mtext("Management year",side=1,line=1.5,outer=FALSE,adj=-4)
plot.new()
o <- c(2,3,4,1) # Order to plot legend elements
legend("bottom",horiz=TRUE,bty="n",
legend=MPNamesSub_legtext[o],
col=cols[o],lty=ltys[o],lwd=lwds[o]
)
2 %% 8
1:10 %% 8
1:36 %% 18
i <- 1; i%%18==1
i <- 1; 1:36%%18==1
i <- 1; 1:36[1:36%%18==1]
i <- 1; (1:36)[1:36%%18==1]
# Figure 3: Mean relative yield
myvarName <- "C"
ylabel <- "Mean relative yield"
ylim <- c(0,2)
assessmentYears <- seq(10,40,by=10)
x.at <- c(0,25,50)
y.at <- c(0,1,2)
for(outName_i in MSEoutNames){
i <- which(MSEoutNames==outName_i)
if(i%%18==1){
layout(matrix(c(1:6,19,7:12,19,13:18,19), ncol=3, byrow=FALSE), heights=c(rep(1,6),0.75))
par(mgp=c(1,0.2,0),mar=c(0,0,0,0),oma=c(1,4,3,3),tck=-0.025,xpd=TRUE,xaxs="i",yaxs="i")
}
topPanels <- (length(scenNames)*(seq_along(OM_Names)-1)+1)
bottomPanels <- length(scenNames)*seq_along(OM_Names)
leftPanels <- seq_along(scenNames)
rightPanels <- tail(seq_along(MSEoutNames),length(scenNames))
out_i <- get(outName_i)
MPNames <- out_i@MPs
myvar <- slot(out_i,myvarName)
MSY <- slot(out_i,"OM")$MSY
myvar <- myvar/MSY # Scale myvar (catch by MSY)
myvarsub <- myvar[,match(MPNamesSub,MPNames),]
myvarsubMeans <- apply(myvarsub,2,function(x){apply(x,2,mean)})
dimnames(myvarsubMeans) <- list(1:nrow(myvarsubMeans),MPNamesSub)
xaxt_i <- ifelse(i%in%bottomPanels,"n","n")
yaxt_i <- ifelse(i%in%leftPanels,"n","n")
matplot(rownames(myvarsubMeans),myvarsubMeans,
col=cols,lty=ltys,lwd=lwds,type=types,
xaxt=xaxt_i,yaxt=yaxt_i,
xlim=xlim,ylim=ylim,xlab="",ylab="")
title(main=colLabsAll[i],line=1)
# grid(col="black")
points(par("usr")[1:2],c(1,1),type="l",lty="1111",lwd=1)
abline(v=assessmentYears,lty="1111",lwd=1)
if(i%in%topPanels){
col.ct <- which(topPanels==i)
mtext(colLabsAll[i],side=3,line=1,outer=TRUE,adj=c(0.15,0.5,0.97)[col.ct],font=2)
}
if(i%in%bottomPanels){
x.at.i <- x.at
if(i>bottomPanels[1]){x.at.i <- x.at[-1]}
axis(side=1,at=x.at.i)
}
if(i%in%leftPanels){
y.at.i <- y.at
if(i>leftPanels[1]){y.at.i <- y.at[1:(length(y.at)-1)]}
axis(side=2,at=y.at.i)
}
if(i%in%rightPanels){
row.ct <- which(rightPanels==i)
rowcenter <-par("usr")[3]+diff(par("usr")[3:4])/2
text(x=par("usr")[2]*1.05,y=rowcenter,rowLabsAll[i],
srt=-90,xpd=NA,font=2)
}
}
mtext(ylabel,side=2,line=1.5,outer=TRUE)
mtext("Management year",side=1,line=1.5,outer=FALSE,adj=-4)
plot.new()
o <- c(2,3,4,1) # Order to plot legend elements
legend("bottom",horiz=TRUE,bty="n",
legend=MPNamesSub_legtext[o],
col=cols[o],lty=ltys[o],lwd=lwds[o]
)
(length(scenNames)*(seq_along(OM_Names)-1)+1)
seq_along(OM_Names)
scenNames
setwd("~/GitHub/InterimAnalysis/SEFSCInterimAnalysis/RunMSE")
OM_BlackSeaBass@D
rdat_BlackSeaBass$parms$SSBend.SSBmsy
MSEoutNames
slot(OM_BlackSeaBass_base_out,"OM")$MSY
outName_i <- "OM_BlackSeaBass_base_out"
out_i <- get(outName_i)
MPNames <- out_i@MPs
myvar <- slot(out_i,myvarName)
MSY <- slot(out_i,"OM")$MSY
myvar <- myvar/MSY # Scale myvar (catch by MSY)
myvarsub <- myvar[,match(MPNamesSub,MPNames),]
myvar
str(myvar)
out_i <- get(outName_i)
MPNames <- out_i@MPs
myvar <- slot(out_i,myvarName)
MSY <- slot(out_i,"OM")$MSY
str(myvar)
MSY
myvar <- myvar/MSY # Scale myvar (catch by MSY)
hist(MSY)
out_i <- get(outName_i)
MPNames <- out_i@MPs
myvar <- slot(out_i,myvarName)
MSY <- slot(out_i,"OM")$MSY
myvarsub <- myvar[,match(MPNamesSub,MPNames),]
myvarsubMeans <- apply(myvarsub,2,function(x){apply(x,2,mean)})
dimnames(myvarsubMeans) <- list(1:nrow(myvarsubMeans),MPNamesSub)
matplot(rownames(myvarsubMeans),myvarsubMeans,
col=cols,lty=ltys,lwd=lwds,type=types,
xaxt=xaxt_i,yaxt=yaxt_i,
xlim=xlim,ylim=ylim,xlab="",ylab="")
rownames(myvarsubMeans)
myvarsubMeans
cols
myvarsubMeans <- apply(myvarsub,2,function(x){apply(x,2,mean)})
dimnames(myvarsubMeans) <- list(1:nrow(myvarsubMeans),MPNamesSub)
xaxt_i <- ifelse(i%in%bottomPanels,"n","n")
yaxt_i <- ifelse(i%in%leftPanels,"n","n")
matplot(rownames(myvarsubMeans),myvarsubMeans,
col=cols,lty=ltys,lwd=lwds,type=types,
xaxt=xaxt_i,yaxt=yaxt_i,
xlim=xlim,ylim=ylim,xlab="",ylab="")
types
matplot(rownames(myvarsubMeans),myvarsubMeans)
xlim
matplot(rownames(myvarsubMeans),myvarsubMeans,
col=cols,lty=ltys,lwd=lwds,type=types#,
#xaxt=xaxt_i,yaxt=yaxt_i,
#xlim=xlim,ylim=ylim,xlab="",ylab=""
)
