filename.dat <- paste(filename,"dat",sep=".")
filename.tpl <- paste(filename,"tpl",sep=".")
filename.cxx <- paste(filename,"cxx",sep=".")
filename.rdat <- paste(filename,"rdat",sep=".")
compile.command=paste0("admb ", filename)
shell(compile.command)
#######Run admb
run.command <- paste(filename, admb.switch,sep=" ")
shell(run.command)
shell(paste("01cleanup.bat"))
######### Remove files associated with ModRootName
unlink(list.files(dADMB)[grepl(ModRootName,list.files(dADMB))]) # Remove files
setwd(wd)
# Chunk 8
save.image(file="_03_BAM_parseDatFile.RData")
# Chunk 1
######
## This script aims to take the tpl file from one assessment and modify it to be as generic as possible, in order to morph it into a model for a new assessment. It also modifies a lot of the object abbreviations to put them in a more consistent format.
# Chunk 2: global_options
options(java.parameters = "-Xmx1g")  # Increase the amount of memory available to Java
library(bamExtras)
# library(Hmisc)
library(knitr)
#library(magrittr) # For enabling pipe operators
#library(zoo) # For moving averages
opts_chunk$set(comment=NA,echo=FALSE,message=FALSE,warning=FALSE,fig.height=6,fig.width=6)
# Chunk 3: admin
rm(list=ls())
wd <- getwd()
# ADMB file directory
dADMB <- "ADMBFiles"
# Name of files from reference stock assessment (often the previous assessment)
dRef <- file.path(dADMB,"manual_mod")
RefdatName <- "gaj42a.dat"
ReftplName <- "gaj42a.tpl"
RefcxxName <- "gaj_make_Robject42a.cxx"
GendatName <- "gaj42aGen.dat"
GentplName <- "gaj42aGen.tpl"
GencxxName <- "gaj42aGen.cxx"
GenRootName <- gsub(".dat","",GendatName)
#switches applied during admb execution, list with space in between
admb.switch='-nox' # '-est -nox'
# Chunk 5
# bam <- bam2r(
#        dat_file = file.path(dRef,RefdatName),
#        tpl_file = file.path(dRef,ReftplName),
#        cxx_file = file.path(dRef,RefcxxName))
bam <- standardize_bam(
dat_file = file.path(dRef,RefdatName),
tpl_file = file.path(dRef,ReftplName),
cxx_file = file.path(dRef,RefcxxName))
dat <- bam$dat
tpl <- bam$tpl
cxx <- bam$cxx
# Update name of cxx file in tpl
tpl <- gsub(x=tpl,pattern=RefcxxName,replacement=GencxxName)
# Chunk 6: writeTplCxx
writeLines(text=dat, con=paste(dADMB,GendatName,sep="/"))
writeLines(text=tpl, con=paste(dADMB,GentplName,sep="/"))
writeLines(text=cxx, con=paste(dADMB,GencxxName,sep="/"))
# Chunk 7: runADMBToTest
####### Compile ADMB code
setwd(dADMB)
filename <- gsub(GentplName,pattern=".tpl",replacement="")
filename.dat <- paste(filename,"dat",sep=".")
filename.tpl <- paste(filename,"tpl",sep=".")
filename.cxx <- paste(filename,"cxx",sep=".")
filename.rdat <- paste(filename,"rdat",sep=".")
compile.command=paste("admb", filename, sep=" ")
shell(compile.command)
#######Run admb
run.command <- paste(filename, admb.switch,sep=" ")
shell(run.command)
shell(paste("01cleanup.bat"))
######### Remove files associated with GenRootName
#unlink(list.files(dADMB)[grepl(GenRootName,list.files(dADMB))]) # Remove files
setwd(wd)
# Chunk 8
save.image(file="_04_BAM_MakeTPLGeneric.RData")
# Chunk 1
######
## This script aims to morph the generic version of the previous model into a model for a new assessment.
# Chunk 2: global_options
options(java.parameters = "-Xmx1g")  # Increase the amount of memory available to Java
library(bamExtras)
library(Hmisc)
library(knitr)
# library(magrittr) # For enabling pipe operators
library(stringr)
library(zoo) # For moving averages
opts_chunk$set(comment=NA,echo=FALSE,message=FALSE,warning=FALSE,fig.height=6,fig.width=6)
# Chunk 3: admin
rm(list=ls())
runName <- "BaseRun"
#dRoot <- "C:/Users/Nikolai.Klibansky/Documents/SEDAR/SEDAR_66/Assessment/ADMB"
# Name working directory for scripts
wd <- getwd()
# ADMB file directory
dADMB <- paste(wd,"ADMBFiles",sep="/")
# Names you want to use for current assessment files
SpedatName <-  "BAMBase.dat"
SpetplName <-  "BAMBase.tpl"
SpecxxName <-  "BAMBase.cxx"
SperdatName <- "BAMBase.rdat"
SpeRootName <- gsub(".dat","",SpedatName)
#switches applied during admb execution, list with space in between
admb.switch='-nox' # '-est -nox'
# Header options ("update" if existing and formatted correctly or "add" if not)
header <- "add"
# Chunk 4: BAMInputHeader
Author <- "NMFS, Beaufort Lab, Sustainable Fisheries Branch"
Analyst <- "Kevin Craig"
Species <- "Greater Amberjack"
Region <- "US South Atlantic"
SEDAR <- "59"
Date <- Sys.time()
# Chunk 5: loadRData
load("_04_BAM_MakeTPLGeneric.RData")
# Chunk 6: user pattern replace
# Specify patterns and replacements to apply only to the r object names in cxx file (does not affect the ADMB object names in the cxx file). These are applied in order!!
# NOTES: names are patterns, values are the replacements
# The substitution is done very conservatively so there is little chance of accidentally changing parts of the cxx.
patrep <- NULL
#   c(
#   "cLcP" = "cL.cP", # Clarify separation between these two fleets cL and cP
#   "cL"="cH",         # Change abbreviation for commercial lines to commercial handlines
#   "_"="\\."         # Change separators from "_" to "."
# )
# Chunk 7: RunBAMToR1
# Retrieve input values from the previous assessment for this species
# L.init.prev <- env.Spe$L.init.Ref
# Current template
bam_to_r_out <- bam_to_r(
dat_file = file.path(dADMB,GendatName),
tpl_file = file.path(dADMB,GentplName),
cxx_file = file.path(dADMB,GencxxName)
)
tpl <- bam_to_r_out$tpl
dat <- bam_to_r_out$dat
names(dat) <- NULL
cxx <- bam_to_r_out$cxx
#L.init <- bam_to_r_out$L.init
# Chunk 8: modifyDat
# Modify header
if(header=="update"){
dat[which(grepl(pattern = "##  Author:",x=dat))]  <- paste("##  Author:",Author)
dat[which(grepl(pattern = "##  Analyst:",x=dat))] <- paste("##  Analyst:",Analyst)
dat[which(grepl(pattern = "##  Species:",x=dat))] <- paste("##  Species:",Species)
dat[which(grepl(pattern = "##  Region:",x=dat))]  <- paste("##  Region:",Region)
dat[which(grepl(pattern = "##  SEDAR:",x=dat))]   <- paste("##  SEDAR:",SEDAR)
dat[which(grepl(pattern = "##  Date:",x=dat))]    <- paste("##  Date:",Date)
}
if(header=="add"){
dat <- c(paste("##  Author:",Author),
paste("##  Analyst:",Analyst),
paste("##  Species:",Species),
paste("##  Region:",Region),
paste("##  SEDAR:",SEDAR),
paste("##  Date:",Date),
"",
"",
dat
)
}
# pattern replacement
# for(i in seq_along(patrep)){
#   dat <- gsub(names(patrep)[i],patrep[i],dat)
# }
# Chunk 9: modifyTpl
tpl <- gsub(x=bam_to_r_out$tpl,pattern=GencxxName,replacement=SpecxxName)
# Modify header
if(header=="update"){
tpl[which(grepl(pattern = "##  Author:",x=tpl))] <- paste("//##  Author:",Author)
tpl[which(grepl(pattern = "##  Analyst:",x=tpl))] <- paste("//##  Analyst:",Analyst)
tpl[which(grepl(pattern = "##  Species:",x=tpl))] <- paste("//##  Species:",Species)
tpl[which(grepl(pattern = "##  Region:",x=tpl))] <- paste("//##  Region:",Region)
tpl[which(grepl(pattern = "##  SEDAR:",x=tpl))] <- paste("//##  SEDAR:",SEDAR)
tpl[which(grepl(pattern = "##  Date:",x=tpl))] <- paste("//##  Date:",Date)
}
if(header=="add"){
tpl <- c(paste("//##  Author:",Author),
paste("//##  Analyst:",Analyst),
paste("//##  Species:",Species),
paste("//##  Region:",Region),
paste("//##  SEDAR:",SEDAR),
paste("//##  Date:",Date),
"",
"",
tpl
)
}
# pattern replacement
# for(i in seq_along(patrep)){
#   tpl <- gsub(names(patrep)[i],patrep[i],tpl)
# }
# Chunk 10: modifyCxx
cxx <- bam_to_r_out$cxx
# Modify header
if(header=="update"){
cxx[which(grepl(pattern = "##  Author:",x=cxx))] <- paste("//##  Author:",Author)
cxx[which(grepl(pattern = "##  Analyst:",x=cxx))] <- paste("//##  Analyst:",Analyst)
cxx[which(grepl(pattern = "##  Species:",x=cxx))] <- paste("//##  Species:",Species)
cxx[which(grepl(pattern = "##  Region:",x=cxx))] <- paste("//##  Region:",Region)
cxx[which(grepl(pattern = "##  SEDAR:",x=cxx))] <- paste("//##  SEDAR:",SEDAR)
cxx[which(grepl(pattern = "##  Date:",x=cxx))] <- paste("//##  Date:",Date)
}
if(header=="add"){
cxx <- c(paste("//##  Author:",Author),
paste("//##  Analyst:",Analyst),
paste("//##  Species:",Species),
paste("//##  Region:",Region),
paste("//##  SEDAR:",SEDAR),
paste("//##  Date:",Date),
"",
"",
cxx
)
}
## Apply pattern replacement to r object names in cxx file (does not affect the ADMB object names in the cxx file)
# Identify r object names specified in cxx file
# regexr.com/6g942
cxx.robnam1 <- cxx.robnam2  <- unlist(str_extract_all(cxx,'(?<=\\(").[^,]+(?=")'))
# Change object names
for(i in seq_along(patrep)){
# gsub patterns inside parentheses and quotes
cxx.robnam2 <- gsub(names(patrep)[i],patrep[i],cxx.robnam2)
}
# Identify lines that have been modified and gsub them in cxx
cxx.lines.mod <- which(cxx.robnam1!=cxx.robnam2)
for(i in cxx.lines.mod){
line.i <- cxx[i]
line.i.new <- sub(cxx.robnam1[i],cxx.robnam2[i],line.i)
cxx[i] <- line.i.new
}
# Chunk 11: writeADMBFiles
writeLines(text=dat, con=paste(dADMB,SpedatName,sep="/"))
writeLines(text=tpl, con=paste(dADMB,SpetplName,sep="/"))
writeLines(text=cxx, con=paste(dADMB,SpecxxName,sep="/"))
# Chunk 12: runADMBToTest
# Change name of cxx file run by tpl
####### Compile ADMB code
setwd(dADMB)
filename <- gsub(SpetplName,pattern=".tpl",replacement="")
filename.dat <- paste(filename,"dat",sep=".")
filename.tpl <- paste(filename,"tpl",sep=".")
filename.cxx <- paste(filename,"cxx",sep=".")
filename.rdat <- paste(filename,"rdat",sep=".")
compile.command=paste("admb", filename, sep=" ")
shell(compile.command)
#######Run admb
run.command <- paste(filename, admb.switch,sep=" ")
shell(run.command)
shell(paste("01cleanup.bat"))
setwd(wd)
# Chunk 13: admin
save.image(file="_05_BAM_ConvertToSpeciesSpecificData.RData")
# Chunk 14: plot results
rdat_speciesname <- paste0("rdat_",gsub(" ","",Species))
spp <- dget(file.path(dADMB,"BAMBase.rdat"))
assign(rdat_speciesname,spp)
save(list=rdat_speciesname,file=file.path(dADMB,paste0(rdat_speciesname,".RData")))
plot_bam(spp)
run_MCBE(
CommonName = NULL,
fileName = "bam",
dir_bam_sim = "sim",
dir_bam_base = "base",
dat_file = "ADMBfiles/BAMBase.dat",
tpl_file = "ADMBfiles/BAMBase.tpl",
cxx_file = "ADMBfiles/BAMBase.cxx"
)
ss <- summarize_MCBE()
plot_MCBE(ss)
pdf(file.path("sim","MCBE_plots.pdf"))
plot_MCBE(ss)
dev.off()
setwd("~/SEDAR/BAM_DATA/MostRecentAssessment/convert_bam2rdata")
# Chunk 1: setup
rm(list=ls())
knitr::opts_chunk$set(comment=NA,echo=FALSE,message=FALSE,warning=FALSE,fig.height=8,fig.width=6)
#library(FishLife)
#library(rfishbase)
library(stringr)
#library(bamExtras) # Nikolai's package
# Chunk 2: admin
dir_bam <- "bam"
dir_RData <- "bam_RData"
# Chunk 3: read csv
# Read in values that are not supplied by BAM rdat files
bamStockMisc <- read.csv("bamStockMisc.csv")
row.names(bamStockMisc) <- bamStockMisc$Name
save(bamStockMisc,file = file.path(dir_RData,"bamStockMisc.RData"))
# Chunk 4: useful values from bam
# sqrt2pi <- sqrt(2*pi)
# g2mt <- 0.000001               # conversion of grams to metric tons
# g2kg <- 0.001                  # conversion of grams to kg
# mt2klb <- 2.20462              # conversion of metric tons to 1000 lb
# mt2lb <- mt2klb*1000.0         # conversion of metric tons to lb
# g2klb <- g2mt*mt2klb           # conversion of grams to 1000 lb
# dzero <- 0.00001
# huge_number <- 1.0e+10
# onehalf <- 0.5
# save(list=c("sqrt2pi","g2mt","g2kg","mt2klb","mt2lb","g2klb","dzero","huge_number","onehalf"),
#      file = file.path(dir_RData,"useful_values.RData")
#      )
# Chunk 5: read bam accessory files
admb2r.cpp <- readLines("admb2r.cpp")
cleanup.bat <- readLines("cleanup.bat")
save(admb2r.cpp, file = file.path(dir_RData,"admb2r.cpp.RData"))
save(cleanup.bat, file = file.path(dir_RData,"cleanup.bat.RData"))
# Chunk 6: load bam data
bam_common_name <- sort(unique(unlist(str_extract_all(list.files(dir_bam),"^.[^.]*"))))
# Get bam rdat lists
for(fileName_i in list.files(dir_bam)){
bam_common_name_i <- unlist(str_extract_all(fileName_i,"^.[^.]*"))
ext_i <- str_extract(fileName_i,"[a-z]+$")
path_i <- file.path(dir_bam,fileName_i)
if(ext_i=="rdat"){
object_i <- dget(path_i)
}else{
object_i <- readLines(path_i)
}
objectName_i <- paste(ext_i,bam_common_name_i,sep="_")
assign(objectName_i,object_i)
# Save rdat lists as RData files
save(list=objectName_i,file=file.path(dir_RData,paste0(objectName_i,".RData")))
}
rm("objectName_i")
library(bamExtras)
# Chunk 1: global_options
rm(list=ls())
library(bamExtras)
#devtools::install_github("mtvincen/FishGraph")
library(FishGraph)
library(ggplot2)
library(knitr)
library(tidyr)
library(doParallel)
library(foreach)
library(msm)
opts_chunk$set(comment=NA,echo=FALSE,message=FALSE,warning=FALSE,fig.height=6,fig.width=6)
wd <- getwd()
# Chunk 2: user
commonName <-  c(#"AtlanticMenhaden",
"BlackSeaBass",
#"BluelineTilefish",
"Cobia",
"GagGrouper",
"GrayTriggerfish",
"GreaterAmberjack",
"RedGrouper",
"RedPorgy",
"RedSnapper",
"ScampGrouper",
"SnowyGrouper",
"SpanishMackerel",
"Tilefish",
"VermilionSnapper"
)
commonNameAbb <- abbreviate(commonName)
random_seed <- 12345
coresUse <- NULL
dir_base <- "base"
dir_MCBE <- "MCBE"
Fref <-
# Chunk 3: parallel setup
# parallel setup
if(is.null(coresUse)){
coresAvail <- detectCores()
coresUse <- coresAvail-1
}
coresUse  <- min(c(coresUse,coresAvail))
cl <- makeCluster(coresUse)
registerDoParallel(cl)
setwd("~/GitHub/myPackages/bamExtras/TEST_FOLDER/comprehensive testing")
dir_tmp <- "MCBE"
if(!dir.exists(dir_tmp)){
dir.create(dir_tmp)
}
for(i in 1:length(commonName)){
commonName_i    <- commonName[i]
commonNameAbb_i <- commonNameAbb[i]
dir_bam_base_i <- paste0(commonNameAbb_i,"_base")
dir_bam_sim_i <- paste0(commonNameAbb_i,"_prof")
# run MCBE
run_MCBE(commonName_i,
dir_bam_base = dir_bam_base_i,
dir_bam_sim  = dir_bam_sim_i
)
# Summarize MCBE
sim_summary_i <- summarize_MCBE(dir_bam_sim=dir_bam_sim_i)
pdf(file.path(dir_bam_sim_i,"MCBE_plots.pdf"))
plot_MCBE(sim_summary_i)
dev.off()
# Move MCBE files to MCBE directory
files2move <- local({
a <- c(dir_bam_base_i,dir_bam_sim_i)
nm_dir_fail_i <- paste0(dir_bam_sim_i,"_fail")
if(nm_dir_fail_i%in%list.files()){
a <- c(a,nm_dir_fail_i)
}
a})
file.copy(
from=files2move,
to=dir_tmp,
overwrite = TRUE,
recursive = TRUE)
unlink(files2move,recursive = TRUE)
}
library(bamExtras)
?F_calc
rdat <- rdat_VermilionSnapper
pr <- rdat$parms
as <- rdat$a.series
F_calc(ac=as$age, h=pr$BH.steep, R0=pr$R0, M=as$M, sel=rdat$sel.age$sel.v.wgted.tot,
PS=as$mat.female, W=as$weight, ep=as$wgt.klb,
plots=TRUE)
rdat <- rdat_RedSnapper
pr <- rdat$parms
as <- rdat$a.series
F_calc(ac=as$age, M=as$M, sel=rdat$sel.age$sel.v.wgted.tot,
PS=as$mat.female, W=as$weight, ep=as$wgt.klb,
plots=TRUE)
par$usr
par("usr")
par("usr")[3:4]
diff(par("usr")[3:4])
diff(par("usr")[3:4])*.1
usr <- par("usr")
diff(usr[3:4])*.1
usr[3]+diff(usr[3:4])*.1
text(F_Px,usr[3]+diff(usr[3:4])*.1, labels=bquote(F[.(Px)] == .(signif(F_Px,plot_digits))),pos=4)
source("~/GitHub/myPackages/bamExtras/R/F_calc.r", echo=TRUE)
rdat <- rdat_RedSnapper
pr <- rdat$parms
as <- rdat$a.series
F_calc(ac=as$age, M=as$M, sel=rdat$sel.age$sel.v.wgted.tot,
PS=as$mat.female, W=as$weight, ep=as$wgt.klb,
plots=TRUE)
source("~/GitHub/myPackages/bamExtras/R/F_calc.r", echo=TRUE)
rdat <- rdat_RedSnapper
pr <- rdat$parms
as <- rdat$a.series
F_calc(ac=as$age, M=as$M, sel=rdat$sel.age$sel.v.wgted.tot,
PS=as$mat.female, W=as$weight, ep=as$wgt.klb,
plots=TRUE)
text(F_Px,SPR_Px, labels=bquote(SPR[.(Px)] == .(signif(SPR_Px,plot_digits)),~F[.(Px)] == .(signif(F_Px,plot_digits))),pos=4)
source("~/GitHub/myPackages/bamExtras/R/F_calc.r", echo=TRUE)
rdat <- rdat_RedSnapper
pr <- rdat$parms
as <- rdat$a.series
F_calc(ac=as$age, M=as$M, sel=rdat$sel.age$sel.v.wgted.tot,
PS=as$mat.female, W=as$weight, ep=as$wgt.klb,
plots=TRUE)
source("~/GitHub/myPackages/bamExtras/R/F_calc.r", echo=TRUE)
source("~/GitHub/myPackages/bamExtras/R/F_calc.r", echo=TRUE)
source("~/GitHub/myPackages/bamExtras/R/F_calc.r", echo=TRUE)
rdat <- rdat_RedSnapper
pr <- rdat$parms
as <- rdat$a.series
F_calc(ac=as$age, M=as$M, sel=rdat$sel.age$sel.v.wgted.tot,
PS=as$mat.female, W=as$weight, ep=as$wgt.klb,
plots=TRUE)
rdat <- rdat_VermilionSnapper
pr <- rdat$parms
as <- rdat$a.series
F_calc(ac=as$age, h=pr$BH.steep, R0=pr$R0, M=as$M, sel=rdat$sel.age$sel.v.wgted.tot,
PS=as$mat.female, W=as$weight, ep=as$wgt.klb,
plots=TRUE)
source("~/GitHub/myPackages/bamExtras/R/F_calc.r", echo=TRUE)
rdat <- rdat_VermilionSnapper
pr <- rdat$parms
as <- rdat$a.series
F_calc(ac=as$age, h=pr$BH.steep, R0=pr$R0, M=as$M, sel=rdat$sel.age$sel.v.wgted.tot,
PS=as$mat.female, W=as$weight, ep=as$wgt.klb,
plots=TRUE)
source("~/GitHub/myPackages/bamExtras/R/F_calc.r", echo=TRUE)
rdat <- rdat_VermilionSnapper
pr <- rdat$parms
as <- rdat$a.series
F_calc(ac=as$age, h=pr$BH.steep, R0=pr$R0, M=as$M, sel=rdat$sel.age$sel.v.wgted.tot,
PS=as$mat.female, W=as$weight, ep=as$wgt.klb,
plots=TRUE)
rdat <- rdat_RedSnapper
pr <- rdat$parms
as <- rdat$a.series
F_calc(ac=as$age, M=as$M, sel=rdat$sel.age$sel.v.wgted.tot,
PS=as$mat.female, W=as$weight, ep=as$wgt.klb,
plots=TRUE)
source("~/GitHub/myPackages/bamExtras/R/F_calc.r", echo=TRUE)
library(bamExtras)
?F_calc
library(bamExtras)
library(bamExtras)
library(bamExtras)
library(bamExtras)
library(bamExtras)
library(bamExtras)
library(bamExtras)
library(bamExtras)
library(bamExtras)
862/6
library(bamExtras)
nm_rp = list("parms"=c("Fref"="Fmsy","F.Fref"="Fend.Fmsy.mean","Sref"="msst","S.Sref"="SSBend.MSST"),
"t.series"=c("F"="F.full","F.Fref"="F.Fmsy","Sref"="SSB","S.Sref"="SSB.msst")
)
nm_rp$parms[["Fref"]]
library(bamExtras)
library(bamExtras)
plot_boot_vec
?plot_boot_vec
?run_MCBE
