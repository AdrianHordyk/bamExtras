nfish_default <- 20 # default nfish per age if estimates are not available
## Characterize age distribution of maturity samples by converting all age comps to numbers of fish
## and computing the overall distribution
# get age comps for each assessment and convert to numbers of fish
obs_agec_nfish <- lapply(seq_along(bam),function(i){
nmi <- names(bam)[i]
x <- bam[[i]]
ageci <-  x$init[grepl("^obs_agec",names(x$init))]
nfishi <- x$init[grepl("^nfish_agec",names(x$init))]
agecnfishi <- lapply(seq_along(ageci),function(j){
nmj <- names(ageci)[j]
abbj <- gsub("^obs_agec_","",nmj)
agecij <- ageci[[j]]
# convert to numeric and retain attributes
att <- attributes(agecij)
agecij <- apply(agecij,2,as.numeric)
attributes(agecij) <- att
nfishij <- nfishi[[paste0("nfish_agec_",abbj)]]
class(nfishij) <- "numeric"
if(!all(rownames(agecij)==names(nfishij))){
warning(paste("For",nmi,"not all rownames (years) in agecij match names of nfishij"))
}
round(agecij*nfishij)
})
names(agecnfishi) <- names(ageci)
return(agecnfishi)
}
)
names(obs_agec_nfish) <- names(bam)
# Total numbers of fish, by age, in age comps from each assessment
obs_agec_nfish_pool <- lapply(seq_along(obs_agec_nfish),function(i){
nmi <- names(obs_agec_nfish)[i]
x <- obs_agec_nfish[[i]]
if(length(x)>0){
colSums(comp_combine(x,scale_rows = FALSE))
}else{
NULL
}
})
names(obs_agec_nfish_pool) <- names(bam)
# Get proportion female objects for all assessments
obs_prop_f <- lapply(bam,function(x){
a <- x$init$obs_prop_f
b <- as.numeric(a)
attributes(b) <- attributes(a)
b
})
# Get maturity objects for all assessments
obs_maturity_f <- lapply(bam,function(x){
# names(x$init)[grepl("maturity",names(x$init))]
a <- x$init$obs_maturity_f
b <- as.numeric(a)
attributes(b) <- attributes(a)
b
})
# Initialize simulated maturity objects
obs_maturity_f_1 <- obs_maturity_f # fitted
obs_maturity_f_2 <- obs_maturity_f # fitted lo
obs_maturity_f_3 <- obs_maturity_f # fitted up
# Estimate low and high maturity for all assessments
a50dev <- c(-1,1) # deviation in a50 to simulate for low and high
for(i in seq_along(obs_maturity_f)){
nmi <- names(obs_maturity_f)[i]
# Estimate maturity curve
yP_init <- obs_maturity_f[[i]]
if(is.matrix(yP_init)){
warning(paste("maturity data for",nmi,"was provided as a matrix. The last row will be used and repeated to fill the matrix in simulations."))
yP <- setNames(as.numeric(tail(yP_init,1)),colnames(tail(yP_init,1)))
}else{
yP <- yP_init
}
nage_i <- obs_agec_nfish_pool[[nmi]]
nf_i <- if(!is.null(nage_i)){
nrepro_i <- nage_i*P_repro
obs_prop_f_i <- obs_prop_f[[nmi]]
round(nrepro_i*obs_prop_f_i)
}else{
setNames(rep(nfish_default,length(yP)),names(yP))
}
y1 <- round(nf_i*yP)
y0 <- nf_i-y1
x <- as.numeric(names(yP))
dataCt <- data.frame(x,y1,y0)
data <- data.frame(x=c(rep(x,y0),rep(x,y1)),y=c(rep(0,sum(y0)),rep(1,sum(y1))))
fit1 <- glm(y~x,data=data,family="binomial")
coef1 <- setNames(coef(fit1),c("intercept","slope"))
names(coef1) <- c("intercept","slope")
a50 <- as.numeric(coef1[["intercept"]])/as.numeric(-coef1[["slope"]])
x_pr <- x
y_pr <- lgs(x_pr,a=coef1[["slope"]],b=a50)
y2_pr <- lgs(x_pr,a=coef1[["slope"]],b=a50+a50dev[1])
y3_pr <- lgs(x_pr,a=coef1[["slope"]],b=a50+a50dev[2])
par(mfrow=c(2,1))
plot(x,yP,ylim=c(0,1),main=nmi)
points(x_pr,y_pr,type="l")
points(x_pr,y2_pr,type="l",lty=2,col="blue")
points(x_pr,y3_pr,type="l",lty=2,col="green")
yP_up <- qbinom(1-(alpha*.5),y0+y1,yP)/nf_i
yP_lo <- qbinom(alpha*.5,y0+y1,yP)/nf_i
plot(x,yP,type="o",ylim=c(0,1),main=nmi)
points(x,yP_lo,type="l",lty=2)
points(x,yP_up,type="l",lty=2)
if(is.matrix(yP_init)){
obs_maturity_f_1[[i]] <- matrix(y_pr,byrow=TRUE,nrow=nrow(yP_init),ncol=ncol(yP_init),dimnames=dimnames(yP_init))
obs_maturity_f_2[[i]] <- matrix(y2_pr,byrow=TRUE,nrow=nrow(yP_init),ncol=ncol(yP_init),dimnames=dimnames(yP_init))
obs_maturity_f_3[[i]] <- matrix(y3_pr,byrow=TRUE,nrow=nrow(yP_init),ncol=ncol(yP_init),dimnames=dimnames(yP_init))
}else{
obs_maturity_f_1[[i]] <- y_pr
obs_maturity_f_2[[i]] <- y2_pr
obs_maturity_f_3[[i]] <- y3_pr
}
}
yP*1.1
yP
Linf_lim
Linf_lim <- c(100,200)
pmin(1,pmax(0,yP*1.1))
# NOTE: based on the the species I have data for, it looks like sample numbers for
# sex and maturity are 2-25% of samples available for age comps (lowest for Spanish mackerel and highest for red porgy)
P_repro <- 0.05 # Proportion of age comps for which reproductive data are collected
alpha <- 0.05
nfish_default <- 20 # default nfish per age if estimates are not available
## Characterize age distribution of maturity samples by converting all age comps to numbers of fish
## and computing the overall distribution
# get age comps for each assessment and convert to numbers of fish
obs_agec_nfish <- lapply(seq_along(bam),function(i){
nmi <- names(bam)[i]
x <- bam[[i]]
ageci <-  x$init[grepl("^obs_agec",names(x$init))]
nfishi <- x$init[grepl("^nfish_agec",names(x$init))]
agecnfishi <- lapply(seq_along(ageci),function(j){
nmj <- names(ageci)[j]
abbj <- gsub("^obs_agec_","",nmj)
agecij <- ageci[[j]]
# convert to numeric and retain attributes
att <- attributes(agecij)
agecij <- apply(agecij,2,as.numeric)
attributes(agecij) <- att
nfishij <- nfishi[[paste0("nfish_agec_",abbj)]]
class(nfishij) <- "numeric"
if(!all(rownames(agecij)==names(nfishij))){
warning(paste("For",nmi,"not all rownames (years) in agecij match names of nfishij"))
}
round(agecij*nfishij)
})
names(agecnfishi) <- names(ageci)
return(agecnfishi)
}
)
names(obs_agec_nfish) <- names(bam)
# Total numbers of fish, by age, in age comps from each assessment
obs_agec_nfish_pool <- lapply(seq_along(obs_agec_nfish),function(i){
nmi <- names(obs_agec_nfish)[i]
x <- obs_agec_nfish[[i]]
if(length(x)>0){
colSums(comp_combine(x,scale_rows = FALSE))
}else{
NULL
}
})
names(obs_agec_nfish_pool) <- names(bam)
# Get proportion female objects for all assessments
obs_prop_f <- lapply(bam,function(x){
a <- x$init$obs_prop_f
b <- as.numeric(a)
attributes(b) <- attributes(a)
b
})
# Get maturity objects for all assessments
obs_maturity_f <- lapply(bam,function(x){
# names(x$init)[grepl("maturity",names(x$init))]
a <- x$init$obs_maturity_f
b <- as.numeric(a)
attributes(b) <- attributes(a)
b
})
# Initialize simulated maturity objects
obs_maturity_f_1 <- obs_maturity_f # fitted
obs_maturity_f_2 <- obs_maturity_f # fitted lo
obs_maturity_f_3 <- obs_maturity_f # fitted up
# Estimate low and high maturity for all assessments
a50dev <- c(-1,1) # deviation in a50 to simulate for low and high
for(i in seq_along(obs_maturity_f)){
nmi <- names(obs_maturity_f)[i]
# Estimate maturity curve
yP_init <- obs_maturity_f[[i]]
if(is.matrix(yP_init)){
warning(paste("maturity data for",nmi,"was provided as a matrix. The last row will be used and repeated to fill the matrix in simulations."))
yP <- setNames(as.numeric(tail(yP_init,1)),colnames(tail(yP_init,1)))
}else{
yP <- yP_init
}
nage_i <- obs_agec_nfish_pool[[nmi]]
nf_i <- if(!is.null(nage_i)){
nrepro_i <- nage_i*P_repro
obs_prop_f_i <- obs_prop_f[[nmi]]
round(nrepro_i*obs_prop_f_i)
}else{
setNames(rep(nfish_default,length(yP)),names(yP))
}
y1 <- round(nf_i*yP)
y0 <- nf_i-y1
x <- as.numeric(names(yP))
dataCt <- data.frame(x,y1,y0)
data <- data.frame(x=c(rep(x,y0),rep(x,y1)),y=c(rep(0,sum(y0)),rep(1,sum(y1))))
fit1 <- glm(y~x,data=data,family="binomial")
coef1 <- setNames(coef(fit1),c("intercept","slope"))
names(coef1) <- c("intercept","slope")
a50 <- as.numeric(coef1[["intercept"]])/as.numeric(-coef1[["slope"]])
x_pr <- x
y_pr <- lgs(x_pr,a=coef1[["slope"]],b=a50)
y2_pr <- lgs(x_pr,a=coef1[["slope"]],b=a50+a50dev[1])
y3_pr <- lgs(x_pr,a=coef1[["slope"]],b=a50+a50dev[2])
par(mfrow=c(2,1))
plot(x,yP,ylim=c(0,1),main=nmi)
points(x_pr,y_pr,type="l")
points(x_pr,y2_pr,type="l",lty=2,col="blue")
points(x_pr,y3_pr,type="l",lty=2,col="green")
# yP_up <- qbinom(1-(alpha*.5),y0+y1,yP)/nf_i
# yP_lo <- qbinom(alpha*.5,y0+y1,yP)/nf_i
yP_lo <- pmin(1,pmax(0,yP*0.9))
yP_up <- pmin(1,pmax(0,yP*1.1))
plot(x,yP,type="o",ylim=c(0,1),main=nmi)
points(x,yP_lo,type="l",lty=2)
points(x,yP_up,type="l",lty=2)
if(is.matrix(yP_init)){
obs_maturity_f_1[[i]] <- matrix(y_pr,byrow=TRUE,nrow=nrow(yP_init),ncol=ncol(yP_init),dimnames=dimnames(yP_init))
obs_maturity_f_2[[i]] <- matrix(y2_pr,byrow=TRUE,nrow=nrow(yP_init),ncol=ncol(yP_init),dimnames=dimnames(yP_init))
obs_maturity_f_3[[i]] <- matrix(y3_pr,byrow=TRUE,nrow=nrow(yP_init),ncol=ncol(yP_init),dimnames=dimnames(yP_init))
}else{
obs_maturity_f_1[[i]] <- y_pr
obs_maturity_f_2[[i]] <- y2_pr
obs_maturity_f_3[[i]] <- y3_pr
}
}
yP
1-yP
.1*(1-yP)
(1-yP)
(0.5-yP)
abs(0.5-yP))
abs(0.5-yP)
.5-abs(0.5-yP)
i <- 1
nmi <- names(obs_maturity_f)[i]
# Estimate maturity curve
yP_init <- obs_maturity_f[[i]]
if(is.matrix(yP_init)){
warning(paste("maturity data for",nmi,"was provided as a matrix. The last row will be used and repeated to fill the matrix in simulations."))
yP <- setNames(as.numeric(tail(yP_init,1)),colnames(tail(yP_init,1)))
}else{
yP <- yP_init
}
.5-abs(0.5-yP)
(.5-abs(0.5-yP))*0.1
# NOTE: based on the the species I have data for, it looks like sample numbers for
# sex and maturity are 2-25% of samples available for age comps (lowest for Spanish mackerel and highest for red porgy)
P_repro <- 0.05 # Proportion of age comps for which reproductive data are collected
alpha <- 0.05
nfish_default <- 20 # default nfish per age if estimates are not available
## Characterize age distribution of maturity samples by converting all age comps to numbers of fish
## and computing the overall distribution
# get age comps for each assessment and convert to numbers of fish
obs_agec_nfish <- lapply(seq_along(bam),function(i){
nmi <- names(bam)[i]
x <- bam[[i]]
ageci <-  x$init[grepl("^obs_agec",names(x$init))]
nfishi <- x$init[grepl("^nfish_agec",names(x$init))]
agecnfishi <- lapply(seq_along(ageci),function(j){
nmj <- names(ageci)[j]
abbj <- gsub("^obs_agec_","",nmj)
agecij <- ageci[[j]]
# convert to numeric and retain attributes
att <- attributes(agecij)
agecij <- apply(agecij,2,as.numeric)
attributes(agecij) <- att
nfishij <- nfishi[[paste0("nfish_agec_",abbj)]]
class(nfishij) <- "numeric"
if(!all(rownames(agecij)==names(nfishij))){
warning(paste("For",nmi,"not all rownames (years) in agecij match names of nfishij"))
}
round(agecij*nfishij)
})
names(agecnfishi) <- names(ageci)
return(agecnfishi)
}
)
names(obs_agec_nfish) <- names(bam)
# Total numbers of fish, by age, in age comps from each assessment
obs_agec_nfish_pool <- lapply(seq_along(obs_agec_nfish),function(i){
nmi <- names(obs_agec_nfish)[i]
x <- obs_agec_nfish[[i]]
if(length(x)>0){
colSums(comp_combine(x,scale_rows = FALSE))
}else{
NULL
}
})
names(obs_agec_nfish_pool) <- names(bam)
# Get proportion female objects for all assessments
obs_prop_f <- lapply(bam,function(x){
a <- x$init$obs_prop_f
b <- as.numeric(a)
attributes(b) <- attributes(a)
b
})
# Get maturity objects for all assessments
obs_maturity_f <- lapply(bam,function(x){
# names(x$init)[grepl("maturity",names(x$init))]
a <- x$init$obs_maturity_f
b <- as.numeric(a)
attributes(b) <- attributes(a)
b
})
# Initialize simulated maturity objects
obs_maturity_f_1 <- obs_maturity_f # fitted
obs_maturity_f_2 <- obs_maturity_f # fitted lo
obs_maturity_f_3 <- obs_maturity_f # fitted up
# Estimate low and high maturity for all assessments
a50dev <- c(-1,1) # deviation in a50 to simulate for low and high
for(i in seq_along(obs_maturity_f)){
nmi <- names(obs_maturity_f)[i]
# Estimate maturity curve
yP_init <- obs_maturity_f[[i]]
if(is.matrix(yP_init)){
warning(paste("maturity data for",nmi,"was provided as a matrix. The last row will be used and repeated to fill the matrix in simulations."))
yP <- setNames(as.numeric(tail(yP_init,1)),colnames(tail(yP_init,1)))
}else{
yP <- yP_init
}
nage_i <- obs_agec_nfish_pool[[nmi]]
nf_i <- if(!is.null(nage_i)){
nrepro_i <- nage_i*P_repro
obs_prop_f_i <- obs_prop_f[[nmi]]
round(nrepro_i*obs_prop_f_i)
}else{
setNames(rep(nfish_default,length(yP)),names(yP))
}
y1 <- round(nf_i*yP)
y0 <- nf_i-y1
x <- as.numeric(names(yP))
dataCt <- data.frame(x,y1,y0)
data <- data.frame(x=c(rep(x,y0),rep(x,y1)),y=c(rep(0,sum(y0)),rep(1,sum(y1))))
fit1 <- glm(y~x,data=data,family="binomial")
coef1 <- setNames(coef(fit1),c("intercept","slope"))
names(coef1) <- c("intercept","slope")
a50 <- as.numeric(coef1[["intercept"]])/as.numeric(-coef1[["slope"]])
x_pr <- x
y_pr <- lgs(x_pr,a=coef1[["slope"]],b=a50)
y2_pr <- lgs(x_pr,a=coef1[["slope"]],b=a50+a50dev[1])
y3_pr <- lgs(x_pr,a=coef1[["slope"]],b=a50+a50dev[2])
par(mfrow=c(2,1))
plot(x,yP,ylim=c(0,1),main=nmi)
points(x_pr,y_pr,type="l")
points(x_pr,y2_pr,type="l",lty=2,col="blue")
points(x_pr,y3_pr,type="l",lty=2,col="green")
# yP_up <- qbinom(1-(alpha*.5),y0+y1,yP)/nf_i
# yP_lo <- qbinom(alpha*.5,y0+y1,yP)/nf_i
yP_lo <- yP-(.5-abs(0.5-yP))*0.1
yP_up <- yP+(.5-abs(0.5-yP))*0.1
plot(x,yP,type="o",ylim=c(0,1),main=nmi)
points(x,yP_lo,type="l",lty=2)
points(x,yP_up,type="l",lty=2)
if(is.matrix(yP_init)){
obs_maturity_f_1[[i]] <- matrix(y_pr,byrow=TRUE,nrow=nrow(yP_init),ncol=ncol(yP_init),dimnames=dimnames(yP_init))
obs_maturity_f_2[[i]] <- matrix(y2_pr,byrow=TRUE,nrow=nrow(yP_init),ncol=ncol(yP_init),dimnames=dimnames(yP_init))
obs_maturity_f_3[[i]] <- matrix(y3_pr,byrow=TRUE,nrow=nrow(yP_init),ncol=ncol(yP_init),dimnames=dimnames(yP_init))
}else{
obs_maturity_f_1[[i]] <- y_pr
obs_maturity_f_2[[i]] <- y2_pr
obs_maturity_f_3[[i]] <- y3_pr
}
}
# NOTE: based on the the species I have data for, it looks like sample numbers for
# sex and maturity are 2-25% of samples available for age comps (lowest for Spanish mackerel and highest for red porgy)
P_repro <- 0.05 # Proportion of age comps for which reproductive data are collected
alpha <- 0.05
nfish_default <- 20 # default nfish per age if estimates are not available
## Characterize age distribution of maturity samples by converting all age comps to numbers of fish
## and computing the overall distribution
# get age comps for each assessment and convert to numbers of fish
obs_agec_nfish <- lapply(seq_along(bam),function(i){
nmi <- names(bam)[i]
x <- bam[[i]]
ageci <-  x$init[grepl("^obs_agec",names(x$init))]
nfishi <- x$init[grepl("^nfish_agec",names(x$init))]
agecnfishi <- lapply(seq_along(ageci),function(j){
nmj <- names(ageci)[j]
abbj <- gsub("^obs_agec_","",nmj)
agecij <- ageci[[j]]
# convert to numeric and retain attributes
att <- attributes(agecij)
agecij <- apply(agecij,2,as.numeric)
attributes(agecij) <- att
nfishij <- nfishi[[paste0("nfish_agec_",abbj)]]
class(nfishij) <- "numeric"
if(!all(rownames(agecij)==names(nfishij))){
warning(paste("For",nmi,"not all rownames (years) in agecij match names of nfishij"))
}
round(agecij*nfishij)
})
names(agecnfishi) <- names(ageci)
return(agecnfishi)
}
)
names(obs_agec_nfish) <- names(bam)
# Total numbers of fish, by age, in age comps from each assessment
obs_agec_nfish_pool <- lapply(seq_along(obs_agec_nfish),function(i){
nmi <- names(obs_agec_nfish)[i]
x <- obs_agec_nfish[[i]]
if(length(x)>0){
colSums(comp_combine(x,scale_rows = FALSE))
}else{
NULL
}
})
names(obs_agec_nfish_pool) <- names(bam)
# Get proportion female objects for all assessments
obs_prop_f <- lapply(bam,function(x){
a <- x$init$obs_prop_f
b <- as.numeric(a)
attributes(b) <- attributes(a)
b
})
# Get maturity objects for all assessments
obs_maturity_f <- lapply(bam,function(x){
# names(x$init)[grepl("maturity",names(x$init))]
a <- x$init$obs_maturity_f
b <- as.numeric(a)
attributes(b) <- attributes(a)
b
})
# Initialize simulated maturity objects
obs_maturity_f_1 <- obs_maturity_f # fitted
obs_maturity_f_2 <- obs_maturity_f # fitted lo
obs_maturity_f_3 <- obs_maturity_f # fitted up
# Estimate low and high maturity for all assessments
a50dev <- c(-1,1) # deviation in a50 to simulate for low and high
for(i in seq_along(obs_maturity_f)){
nmi <- names(obs_maturity_f)[i]
# Estimate maturity curve
yP_init <- obs_maturity_f[[i]]
if(is.matrix(yP_init)){
warning(paste("maturity data for",nmi,"was provided as a matrix. The last row will be used and repeated to fill the matrix in simulations."))
yP <- setNames(as.numeric(tail(yP_init,1)),colnames(tail(yP_init,1)))
}else{
yP <- yP_init
}
nage_i <- obs_agec_nfish_pool[[nmi]]
nf_i <- if(!is.null(nage_i)){
nrepro_i <- nage_i*P_repro
obs_prop_f_i <- obs_prop_f[[nmi]]
round(nrepro_i*obs_prop_f_i)
}else{
setNames(rep(nfish_default,length(yP)),names(yP))
}
y1 <- round(nf_i*yP)
y0 <- nf_i-y1
x <- as.numeric(names(yP))
dataCt <- data.frame(x,y1,y0)
data <- data.frame(x=c(rep(x,y0),rep(x,y1)),y=c(rep(0,sum(y0)),rep(1,sum(y1))))
fit1 <- glm(y~x,data=data,family="binomial")
coef1 <- setNames(coef(fit1),c("intercept","slope"))
names(coef1) <- c("intercept","slope")
a50 <- as.numeric(coef1[["intercept"]])/as.numeric(-coef1[["slope"]])
x_pr <- x
y_pr <- lgs(x_pr,a=coef1[["slope"]],b=a50)
y2_pr <- lgs(x_pr,a=coef1[["slope"]],b=a50+a50dev[1])
y3_pr <- lgs(x_pr,a=coef1[["slope"]],b=a50+a50dev[2])
par(mfrow=c(2,1))
plot(x,yP,ylim=c(0,1),main=nmi)
points(x_pr,y_pr,type="l")
points(x_pr,y2_pr,type="l",lty=2,col="blue")
points(x_pr,y3_pr,type="l",lty=2,col="green")
# yP_up <- qbinom(1-(alpha*.5),y0+y1,yP)/nf_i
# yP_lo <- qbinom(alpha*.5,y0+y1,yP)/nf_i
yP_lo <- yP-(.5-abs(0.5-yP))*0.2
yP_up <- yP+(.5-abs(0.5-yP))*0.2
plot(x,yP,type="o",ylim=c(0,1),main=nmi)
points(x,yP_lo,type="l",lty=2)
points(x,yP_up,type="l",lty=2)
if(is.matrix(yP_init)){
obs_maturity_f_1[[i]] <- matrix(y_pr,byrow=TRUE,nrow=nrow(yP_init),ncol=ncol(yP_init),dimnames=dimnames(yP_init))
obs_maturity_f_2[[i]] <- matrix(y2_pr,byrow=TRUE,nrow=nrow(yP_init),ncol=ncol(yP_init),dimnames=dimnames(yP_init))
obs_maturity_f_3[[i]] <- matrix(y3_pr,byrow=TRUE,nrow=nrow(yP_init),ncol=ncol(yP_init),dimnames=dimnames(yP_init))
}else{
obs_maturity_f_1[[i]] <- y_pr
obs_maturity_f_2[[i]] <- y2_pr
obs_maturity_f_3[[i]] <- y3_pr
}
}
fn_par = list(
M = "runif(nsim,M_lim[1],M_lim[2])",
K = "runif(nsim,K_lim[1],K_lim[2])",
Linf = "runif(nsim,Linf_lim[1],Linf_lim[2])",
t0 = "runif(nsim,t0_lim[1],t0_lim[2])",
steep = "runif(nsim,steep_lim[1],steep_lim[2])",
rec_sigma = "rtnorm(n=nsim,mean=0.6,sd=0.15,lower=0.3,upper=1.0)",
Dmort = "apply(Dmort_lim,2,function(x){runif(nsim,min(x),max(x))})",
Pf=list(a="runif(nsim,Pfa_lim[1],Pfa_lim[2]))",b="runif(nsim,Pfa_lim[1],Pfa_lim[2]))"),
Pfmat=list(a="runif(nsim,Pfmata_lim[1],Pfmata_lim[2]))",b="runif(nsim,Pfmata_lim[1],Pfmata_lim[2]))")
)
library(bamExtras)
?run_MCBE
getwd*
getwd()
run_MCBE("RedPorgy", dir_bam_base="RePo_base", dir_bam_sim="RePo_sim")
source("~/GitHub/myPackages/bamExtras/R/run_MCBE.R", echo=TRUE)
setwd("~/GitHub/myPackages/bamExtras/TEST_FOLDER/comprehensive testing")
run_MCBE("RedPorgy", dir_bam_base="RePo_base", dir_bam_sim="RePo_sim")
setwd("~/GitHub/myPackages/bamExtras/R")
setwd("~/GitHub/myPackages/bamExtras/TEST_FOLDER/comprehensive testing")
