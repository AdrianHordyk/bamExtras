library(rfishbase)
?popgrowth
popgrowth("Oreochromis niloticus")
library(rfishbase)
?popgrowth
popgrowth("Oreochromis niloticus")
library(rfishbase)
popgrowth("Oreochromis niloticus")
library(rfishbase)
popgrowth("Oreochromis niloticus")
remove.packages("rfishbase")
library("rfishbase")
install.packages("rfishbase")
library("rfishbase")
popgrowth("Oreochromis niloticus")
popgrowth
default_db()
?default_db()
db_dir()
?default_db()
?db_dir
Sys.getenv("DB_DRIVER", "RSQLite")
updateR()
library(installr)
install.packages("installr")
library(installr)
updateR()
updateR()
install.packages(c("bookdown", "broom"))
library("rfishbase")
?popgrowth
db_default()
default_db()
?default_db
db_dir()
Sys.getenv("DB_DRIVER", "RSQLite")
library(RSQLite)
detach("package:RSQLite", unload = TRUE)
library(Rcpp)
install.packages("Rcpp")
library(RSQLite)
default_db()
library("rfishbase")
default_db()
popgrowth("Oreochromis niloticus")
install.packages(c("bslib", "cachem"))
install.packages("bslib")
library(bamExtras) # Nikolai's package
library(bamExtras);rdat <- rdat_BlackSeaBass; Data = new('Data'); herm = NULL; nsim=1
library(bamExtras);library(MSEtool);rdat <- rdat_BlackSeaBass; Data = new('Data'); herm = NULL; nsim=1
rdat <- standardize_rdat(rdat)
info <- rdat$info
parms <- rdat$parms
parm.cons <- rdat$parm.cons
a.series <- rdat$a.series
t.series <- rdat$t.series
Name <- gsub(" ","",str_to_title(info$species))
years <- paste(parms$styr:parms$endyr)
nyears <- length(years)
# MSEtool expects age-based data to begin with age 1
if(min(rdat$a.series$age)<1){
warning(paste(Name,": Minimum age <1. Age-based data limited to age >=1"))
a.series <- a.series[a.series$age%in%1:max(a.series$age),]
rdat$a.series <- a.series
}
age <- rdat$a.series$age
t.series <- t.series[years,]
Common_Name <- str_replace_all(Name,"(?<=[a-z])(?=[A-Z])"," ")
if(is.null(genus_species)){genus_species <- bamStockMisc[Name,"Species"]}
if(is.null(herm)){herm <- bamStockMisc[Name,"herm"]}
Linf <- parm.cons$Linf[1]
K <- parm.cons$K[1]
t0 <- parm.cons$t0[1]
catch.raw <- t.series$total.L.klb
cc.yrCat <- complete.cases(t.series$year,catch.raw) # Complete cases for catch data series
# units.TAC <- "1000 lbs" # This will have to be modified if catch.raw is not equal to t.series$total.L.klb
# comp.mats <- rdat$comp.mats # Define list of age and size composition matrices
year <- t.series$year[cc.yrCat]
catch <- catch.raw[cc.yrCat]
library(bamExtras);library(MSEtool);library(stringr);rdat <- rdat_BlackSeaBass; Data = new('Data'); herm = NULL; nsim=1
rdat <- standardize_rdat(rdat)
info <- rdat$info
parms <- rdat$parms
parm.cons <- rdat$parm.cons
a.series <- rdat$a.series
t.series <- rdat$t.series
Name <- gsub(" ","",str_to_title(info$species))
years <- paste(parms$styr:parms$endyr)
nyears <- length(years)
# MSEtool expects age-based data to begin with age 1
if(min(rdat$a.series$age)<1){
warning(paste(Name,": Minimum age <1. Age-based data limited to age >=1"))
a.series <- a.series[a.series$age%in%1:max(a.series$age),]
rdat$a.series <- a.series
}
age <- rdat$a.series$age
t.series <- t.series[years,]
Common_Name <- str_replace_all(Name,"(?<=[a-z])(?=[A-Z])"," ")
if(is.null(genus_species)){genus_species <- bamStockMisc[Name,"Species"]}
if(is.null(herm)){herm <- bamStockMisc[Name,"herm"]}
Linf <- parm.cons$Linf[1]
K <- parm.cons$K[1]
t0 <- parm.cons$t0[1]
catch.raw <- t.series$total.L.klb
cc.yrCat <- complete.cases(t.series$year,catch.raw) # Complete cases for catch data series
# units.TAC <- "1000 lbs" # This will have to be modified if catch.raw is not equal to t.series$total.L.klb
# comp.mats <- rdat$comp.mats # Define list of age and size composition matrices
year <- t.series$year[cc.yrCat]
catch <- catch.raw[cc.yrCat]
# Catch (Cat): Total annual catches (NOTE: DLMtool wants Cat to be a matrix)
Cat <- matrix(data=catch,nrow=nsim,ncol=length(catch),dimnames=list("sim"=nsim))
# Abundance Index (Ind): Relative abundance index (NOTE: DLMtool wants Ind to be a matrix)
Ind <- local({ # Calculate a mean index from all available indices
D <- t.series[cc.yrCat,]
x <- names(D)
I.ob.names <- x[grepl(pattern="U.",x=x)&grepl(pattern=".ob",x=x)]
# Identify fleet name abbreviations and pass to global environment
fleet.abb <- I.ob.names
for(i in c("U.",".ob")) {
fleet.abb <- gsub(pattern=i,replacement="",x=fleet.abb)}
I.mean <- apply(D[,I.ob.names,drop=FALSE],1, geomean) # Calculate geometric mean of all indices
I.mean <- I.mean/mean(I.mean, na.rm=TRUE) # Restandardize
I.mean <- matrix(data=I.mean,nrow=1,ncol=length(I.mean))
return(I.mean)
})
Ind
D[,I.ob.names,drop=FALSE]
D <- t.series[cc.yrCat,]
x <- names(D)
I.ob.names <- x[grepl(pattern="U.",x=x)&grepl(pattern=".ob",x=x)]
# Identify fleet name abbreviations and pass to global environment
fleet.abb <- I.ob.names
for(i in c("U.",".ob")) {
fleet.abb <- gsub(pattern=i,replacement="",x=fleet.abb)}
I.mean <- apply(D[,I.ob.names,drop=FALSE],1, geomean) # Calculate geometric mean of all indices
I.mean <- I.mean/mean(I.mean, na.rm=TRUE) # Restandardize
I.mean <- matrix(data=I.mean,nrow=1,ncol=length(I.mean))
D[,I.ob.names,drop=FALSE]
plot(Ind)
Ind
as.numeric(Ind)
plot(as.numeric(Ind))
matplot(D[,I.ob.names,drop=FALSE])
matplot(D[,I.ob.names,drop=FALSE],type="o",pch="16")
matplot(D[,I.ob.names,drop=FALSE],type="o",pch=16)
matplot(D[,I.ob.names,drop=FALSE],type="p",pch=16)
matplot(D[,I.ob.names,drop=FALSE],type="p",pch=16);points(Ind)
Ind
plot(Ind)
matplot(D[,I.ob.names,drop=FALSE],type="p",pch=16);points(as.numeric(Ind))
matplot(D[,I.ob.names,drop=FALSE],type="p",pch=16);points(as.numeric(Ind),type="l")
library(MSEtool)
xname
x
setwd("~/GitHub/myPackages/bamExtras")
source("~/GitHub/myPackages/bamExtras/update.package.bamExtras.r")
?vb_age
?data_polate
mydata <- rdat_RedGrouper$a.series
out <- data_polate(mydata,xout=seq(min(mydata$age),max(mydata$age),by=0.5))
par(mfrow=c(1,1))
for(i in colnames(out[,-1])){
y_i <- out[,i]
plot(xout,y_i,ylab=i)
points(x,data[,i],col="red",pch=16)
readline(prompt="Press [enter] to continue")
out
for(i in colnames(out[,-1])){
y_i <- out[,i]
plot(xout,y_i,ylab=i)
points(x,data[,i],col="red",pch=16)
readline(prompt="Press [enter] to continue")
}
for(i in colnames(out[,-1])){
y_i <- out[,i]
plot(xout,y_i,ylab=i)
points(x,data[,i],col="red",pch=16)
readline(prompt="Press [enter] to continue")
}
mydata <- rdat_RedGrouper$a.series
out <- data_polate(mydata,xout=seq(min(mydata$age),max(mydata$age),by=0.5))
par(mfrow=c(1,1))
for(i in colnames(out[,-1])){
x <- mydata[,1]
xout <- out[,1]
yout_i <- out[,i]
plot(xout,yout_i,ylab=i)
points(x,mydata[,i],col="red",pch=16)
readline(prompt="Press [enter] to continue")
}
source("~/GitHub/myPackages/bamExtras/update.package.bamExtras.r")
setwd("~/GitHub/myPackages/bamExtras")
source("~/GitHub/myPackages/bamExtras/update.package.bamExtras.r")
?vb_age
?data_polate
mydata <- rdat_RedGrouper$a.series
out <- data_polate(mydata,xout=seq(min(mydata$age),max(mydata$age),by=0.5))
par(mfrow=c(1,1))
for(i in colnames(out[,-1])){
x <- mydata[,1]
xout <- out[,1]
yout_i <- out[,i]
plot(xout,yout_i,ylab=i)
points(x,mydata[,i],col="red",pch=16)
readline(prompt="Press [enter] to continue")
}
