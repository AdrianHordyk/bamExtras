bam_common_name <- unlist(str_extract_all(list.files(dir_bam_rdat),"^.*(?=(SEDAR))"))
bam_rdat_name <- paste("rdat",bam_common_name,sep="_")
# Get bam rdat lists
for(file_i in list.files(dir_bam_rdat)){
bam_common_name_i <- unlist(str_extract_all(file_i,"^.*(?=(SEDAR))"))
rdat_path_i <- file.path(dir_bam_rdat,file_i)
rdat_i <- dget(rdat_path_i)
rdat_name_i <- paste("rdat",bam_common_name_i,sep="_")
assign(rdat_name_i,rdat_i)
# Save rdat lists as RData files
save(list=rdat_name_i,file=file.path("bam_rdat_RData",paste0(rdat_name_i,".RData")))
}
rm("rdat_i")
# Chunk 7: user bam species
bam_common_name_sub <- c(
"BlackSeaBass",
"BluelineTilefish",
"Cobia",
"GagGrouper",
"GrayTriggerfish",
"GreaterAmberjack",
#"MenhadenAtl",
"RedGrouper",
"RedPorgy",
"RedSnapper",
"SnowyGrouper",
#"SpanishMackerel",
"Tilefish",
"VermilionSnapper"
)
bam_rdat_sub <- paste("rdat",bam_common_name_sub,sep="_")
# Chunk 9: build OM
# Stock_init <- new('Stock')
#
# # Initialize objects for saving computed values
# dep <- rec_AC <- A50 <- L50 <- setNames(rep(NA,length(bam_common_name_sub)),bam_common_name_sub)
for(rdat_name_i in bam_rdat_sub){
rdat_i <- get(rdat_name_i)
Data_name_i <- gsub("rdat","Data",rdat_name_i)
Data_i <- rdat_to_Data(rdat_i, Mat_age1_max=Mat_age1_max, length_sc = length_sc)
# This is to try to solve a problem that occurs later when running Simulate on OM_GreaterAmberjack that has something to do with CAL
# I think it might be occurring because there are length comps in a year with no age comps. Maybe. It doesn't occur with Cobia which also
# has CAL with values for only a single year.
if(Data_name_i=="Data_GreaterAmberjack"){
Data_i@CAL <- array(NA,c(1,1,1))
Data_i@CAL_bins <- as.numeric(NA)
Data_i@CAL_mids <- as.numeric(NA)
}
#Data_i@wla <- Data_i@wla*0.00220462 # Convert kg to klb
assign(Data_name_i,Data_i)
Stock_name_i <- gsub("rdat","Stock",rdat_name_i)
Stock_i <- rdat_to_Stock(rdat_i, Mat_age1_max=Mat_age1_max, length_sc = length_sc,
use_bam_R0 = use_bam_R0)
#Stock_i@a <- Stock_i@a*0.00220462 # Convert kg to klb
assign(Stock_name_i,Stock_i)
Fleet_name_i <- gsub("rdat","Fleet",rdat_name_i)
Fleet_i <- rdat_to_Fleet(rdat_i,Eff_sc=0.1 * c(-1, 1) + 1)
assign(Fleet_name_i,Fleet_i)
Obs_name_i <- gsub("rdat","Obs",rdat_name_i)
Obs_i <- get(Obs_name)
slot(Obs_i,"sigmaRbiascv") <- sigmaRbiascv
slot(Obs_i,"Eobs") <- Eobs
slot(Obs_i,"Ebiascv") <- Ebiascv
# # Set Iobs based on range of standard errors is residuals from fitting to indices in BAM
# Obs_i@Iobs <- local({
# t.series_i <- rdat_i$t.series
# U.ob.names <- names(t.series_i)[grepl("^U.*ob$",names(t.series_i))]
# root <- gsub("U.|.ob","",U.ob.names)
# U.pr.names <- paste0("U.",root,".pr")
# U.resid <- t.series_i[,U.ob.names]-t.series_i[,U.pr.names,drop=FALSE]
# round(range(apply(U.resid,2,function(x){sd(x,na.rm=TRUE)})),3)
#
# })
assign(Obs_name_i,Obs_i)
Imp_name_i <- gsub("rdat","Imp",rdat_name_i)
Imp_i <- get(Imp_name)
assign(Imp_name_i,Imp_i)
OM_i <- new("OM", Stock_i, Fleet_i, Obs_i, Imp_i)
OM_name_i <- gsub("rdat","OM",rdat_name_i)
# Fill OM slots
slot(OM_i,"Agency") <- Agency
slot(OM_i,"Region") <- Region
slot(OM_i,"Sponsor") <- Sponsor
slot(OM_i,"Latitude") <- Latitude
slot(OM_i,"Longitude") <- Longitude
slot(OM_i,"nsim") <- nsim
slot(OM_i,"proyears") <- proyears
slot(OM_i,"interval") <- interval
slot(OM_i,"pstar") <- pstar
slot(OM_i,"maxF") <- maxF
slot(OM_i,"reps") <- reps
cpars_i <- rdat_to_cpars(rdat_i, nsim=slot(OM_i,"nsim"), nyears=slot(OM_i,"nyears"), proyears=slot(OM_i,"proyears"),Mat_age1_max=Mat_age1_max)
cpars_i$D <- rep(mean(Stock_i@D),nsim)
cpars_i$Data <- Data_i
slot(OM_i,"cpars") <- cpars_i
assign(OM_name_i,OM_i)
rm(list=c("Data_i","Stock_i","Fleet_i","Obs_i","Imp_i"))
}
# Chunk 10: build OM VPA2OM
vec_to_mat <- function(vec){
matrix(vec,nrow=dim(naa)[2],ncol=dim(naa)[3],byrow=FALSE,
dimnames=dimnames(naa)[2:3])
}
mat_to_array <- function(mat,nsim){
mat_data <- rep(as.numeric(mat),each=nsim)
array(mat_data, dim=c(nsim,nrow(mat),ncol(mat)),
dimnames=list("sim"=1:nsim, "ages"=rownames(mat), "year"=colnames(mat)))
}
for(rdat_name_i in bam_rdat_sub){
rdat_i <- standardize_rdat(get(rdat_name_i))
Name_i <- gsub("rdat_","",rdat_name_i)
herm_i <- bamStockMisc[Name_i, "herm"]
OM2_name_i <- gsub("rdat","OM2",rdat_name_i)
a.series_i <- rdat_i$a.series
ageinit_i <- a.series_i$age
parms_i <- rdat_i$parms
parm.cons_i <- rdat_i$parm.cons
years_i <- paste(parms_i$styr:parms_i$endyr)
R0_i <- parms_i$BH.R0
Linf_i <- parm.cons_i$Linf[1]*length_sc
K_i <- parm.cons_i$K[1]
t0_i <- parm.cons_i$t0[1]
if(min(a.series_i$age)>0){
warning(paste(Name_i,": Minimum age > 0. Age-based data extrapolated to age-0"))
a.series_i <- data_polate(a.series_i,xout=0:max(a.series_i$age))
a.series_i <- data_lim(a.series_i,xlim=c(0,Inf))
a.series_i <- data_lim(a.series_i,xname=c("prop.female","prop.male","mat.female","mat.male"),xlim=c(0,1))
a.series_i <- as.data.frame(a.series_i)
rownames(a.series_i) <- a.series_i$age
}
age_i <- a.series_i$age
naa_mat <- cbind("age"=ageinit_i,t(rdat_i$N.age[years_i,]))
naa_mat2 <- data_polate(naa_mat,xout = age_i)
rownames(naa_mat2) <- age_i
naa <- mat_to_array(naa_mat2[,-1],nsim=nsim)
faa_mat <- cbind("age"=ageinit_i,t(rdat_i$F.age[years_i,]))
faa_mat2 <- data_polate(faa_mat,xout = age_i)
rownames(faa_mat2) <- age_i
faa_mat2[faa_mat2<0] <- 0 # Don't let F be negative
faa <- mat_to_array(faa_mat2[,-1],nsim=nsim)
mat_waa_klb <- matrix(a.series_i$wgt.klb,
nrow=dim(naa)[2],ncol=dim(naa)[3],byrow=FALSE,
dimnames=dimnames(naa)[2:3])
waa <- mat_to_array(mat_waa_klb,nsim=nsim)
mat_pmat <- matrix(pmatage(a.series_i,herm=herm_i)$pmat,
nrow=dim(naa)[2],ncol=dim(naa)[3],byrow=FALSE,
dimnames=dimnames(naa)[2:3])
Mataa <- mat_to_array(mat_pmat,nsim=nsim)
mat_M <- matrix(a.series_i$M,
nrow=dim(naa)[2],ncol=dim(naa)[3],byrow=FALSE,
dimnames=dimnames(naa)[2:3])
Maa <- mat_to_array(mat_M,nsim=nsim)
mat_laa <- matrix(a.series_i$length*length_sc,
nrow=dim(naa)[2],ncol=dim(naa)[3],byrow=FALSE,
dimnames=dimnames(naa)[2:3])
laa <- mat_to_array(mat_laa,nsim=nsim)
OM2_i <- VPA2OM(Name=Name_i,
CurrentYr = parms_i$endyr,
h=parms_i$BH.steep, R0=R0_i,
naa=naa, faa=faa, waa=waa, Mataa=Mataa, Maa=Maa, laa=laa)
OM2_i@cpars$K <- rep(K_i,nsim)
OM2_i@cpars$Linf <- rep(Linf_i,nsim)
OM2_i@cpars$t0 <- rep(t0_i,nsim)
# OM2_i@Size_area_1 <- c(1,0)
# OM2_i@Frac_area_1 <- c(1,0)
# OM2_i@Prob_staying <- c(1,0)
#
assign(OM2_name_i,OM2_i)
}
# Chunk 16: plot and save OM2
OM2_name_bam <- gsub("rdat","OM2",bam_rdat_sub) # OM names from bam models
if(plot_OM){
# OMToPlot <- local({
#   a <- avail("OM")
#   a[!a%in%c("testOM","OM_i"#,"OM_GrayTriggerfish", "OM_GreaterAmberjack", "OM_RedSnapper","OM_VermilionSnapper"
#     )]
# })
# set2 <- c("OM_RedGrouper","OM_RedPorgy","OM_RedSnapper","OM_SnowyGrouper","OM_Tilefish","OM_VermilionSnapper")
for(OM2_name_i in OM2_name_bam){
OM2_i <- get(OM2_name_i)
cat(paste0("\n\nWorking on ",OM2_name_i,"\n"))
Hist_i <- MSEtool::Simulate(OM2_i) # Generate historical data
if(OM2_name_i%in%OM2_name_bam){
Hist_name_i <- gsub("OM2","Hist",OM2_name_i)
assign(Hist_name_i,Hist_i)
saveRDS(Hist_i, file = file.path("Hist","SEFSC",paste0(Hist_name_i,".rds")))
saveRDS(OM2_i,file=file.path("OM","SEFSC",paste0(OM2_name_i,".rds")),compress=FALSE)
}
}
}
# Chunk 17: plot Hist with bam
#pdf("HistBam.pdf")
CIpct = 95
for(i in bam_common_name_sub){
OM_i <- get(paste0("OM2_",i))
# Data_i <- get(paste0("Data_",i))
Hist_i <- get(paste0("Hist_",i))
rdat_i <- get(paste0("rdat_",i))
parms_i <- rdat_i$parms
years_i <- paste(parms_i$styr:parms_i$endyr)
t.series_i <- rdat_i$t.series[years_i,]
par(mfrow=c(3,2),mgp=c(0.9,0.1,0),tck=-0.01,mar=c(2,2.5,1,1),oma=c(0,0,1.5,1))
# Landings
Lmatrix <- Hist_i@TSdata$Landings[,,1]+Hist_i@TSdata$Landings[,,2]
Lbam <- t.series_i$total.L.klb
Lylim <- range(c(0,as.numeric(Lmatrix),Lbam))
plot_boot_vec(Lmatrix,CIpct=CIpct,xlab="year",ylab="Landings (1000 lb)",ylim=Lylim)
#par(new=TRUE)
points(Lbam,type="o",#axes=FALSE,xlab="",ylab="",
col="blue")
# axis(side=4,line=par("mgp")[3],col="blue",col.ticks="blue",col.axis="blue")
# Indices
plot_boot_vec(Hist_i@Data@Ind,CIpct=CIpct,xlab="year",ylab="Ind")
# points(seq_along(Data_i@Ind),Data_i@Ind,type="o",col="blue")
# Recruitment
Rmatrix <- Hist_i@AtAge$Number[,1,,1]+Hist_i@AtAge$Number[,1,,2]
plot_boot_vec(Rmatrix,CIpct=CIpct,xlab="year",ylab="recruits")
# abline(h=Hist_i@OM@R0,lty=2,lwd=2)
#par(new=TRUE)
points(t.series_i$recruits,type="o", col="blue")
# axis(side=4,line=par("mgp")[3],col="blue",col.ticks="blue",col.axis="blue")
# N
Nmatrix <- Hist_i@TSdata$Number[,,1]+Hist_i@TSdata$Number[,,2]
plot_boot_vec(Nmatrix,CIpct=CIpct,xlab="year",ylab="N")
#par(new=TRUE)
points(t.series_i$N,type="o",col="blue")
# axis(side=4,line=par("mgp")[3],col="blue",col.ticks="blue",col.axis="blue")
# F
Fmatrix <- Hist_i@TSdata$Find
plot_boot_vec(Fmatrix,CIpct=CIpct,xlab="year",ylab="F")
# par(new=TRUE)
points(t.series_i$year,t.series_i$F.full,type="o",
col="blue")
#axis(side=4,line=par("mgp")[3],col="blue",col.ticks="blue",col.axis="blue")
# B
Bmatrix <- Hist_i@TSdata$Biomass[,,1]+Hist_i@TSdata$Biomass[,,2]
Bbam <- t.series_i$B
Bbamklb <- conv_unit(Bbam,from="metric_ton",to="lbs")/1000
plot_boot_vec(Bmatrix,CIpct=CIpct,xlab="year",ylab="Biomass (1000 lb)")
par(new=TRUE)
points(Bbamklb,type="o", #axes=FALSE,xlab="",ylab="",
col="blue")
# axis(side=4,line=par("mgp")[3],col="blue",col.ticks="blue",col.axis="blue")
mtext(i,side=3,line=0,outer=TRUE)
# F/Fmsy
# SSB/SSBmsy
}
#dev.off()
bam_rdat_sub
# Chunk 1: setup
rm(list=ls())
knitr::opts_chunk$set(comment=NA,echo=FALSE,message=FALSE,warning=FALSE,fig.height=8,fig.width=6)
library(car)
library(faux) # Simulation for Factorial Designs
# devtools::install_github("james-thorson/FishLife")
library(FishLife)
library(Hmisc)
library(MultiRNG) # Multivariate Pseudo-Random Number Generation
library(measurements) # Unit conversion functions like conv_unit()
library(openMSE)
# library(DLMtool)
# library(MSEtool)
# library(SAMtool)
library(rfishbase)
library(stringr)
library(bamExtras) # Nikolai's package
source("Plot_taxa_NK.R")
# Chunk 2: user
length_sc <- 0.1 # Scalar (multiplier) to convert length units. MSEtool examples seem to use cm whereas BAM uses mm.
plot_OM <- TRUE # Switch for plotting OM. It takes a while to plot them all
Obs_name <- "Perfect_Info"
Imp_name <- "Perfect_Imp"
# Limit maximum value of proportion mature of first age class (usually age-1)
# Some models fail when maturity of first age class is too high (e.g. >0.5)
Mat_age1_max <- 0.49
# par_cv: When generating parameters for Stock objects, mean values are observed from rdat.
#         Coefficient of variation (CV) values are set to compute the standard deviation of
#         a normal distribution from which to sample parameter values
par_cv <- c("TLinfinity"=0.1,"K"=0.1,"M"=0.1)
# OM
Agency <- "NMFS SEFSC"
Region <- "Southeast US Atlantic"
Sponsor <- "none"
Latitude <-  mean(c(25.0,35.6))
Longitude <- mean(c(-81.5,-74.0))
nsim <- 250 # The number of simulations (48 is the minimum number you can run in parallel)
proyears <- 50 # The number of projected years
interval <- 4  # The assessment interval - how often would you like to update the management system?
pstar <- 0.5 # The percentile of the sample of the management recommendation for each method
maxF <- 3.0 # Maximum instantaneous fishing mortality rate that may be simulated for any given age class
reps <- 1 # Number of samples of the management recommendation for each method. Note that when this is set to 1, the mean value of the data inputs is used
# Obs
sigmaRbiascv <- 0.01 # I think this is a new slot and is not specified in "Perfect_Info"
Eobs <- c(0,0.05) # I think this is a new slot and is not specified in "Perfect_Info"
Ebiascv <- 0.01 # I think this is a new slot and is not specified in "Perfect_Info"
use_bam_R0 <- TRUE
use_FishLife <- FALSE # Should FishLife estimates be used in OM?
# Chunk 3: admin
dir_bam_dat <-  "bam_dat"
dir_bam_tpl <-  "bam_tpl"
dir_bam_rdat <- "bam_rdat"
# Chunk 4: read data
# Read in values that are not supplied by BAM rdat files
bamStockMisc <- read.csv("bamStockMisc.csv")
row.names(bamStockMisc) <- bamStockMisc$Name
save(bamStockMisc,file="bamStockMisc.RData")
Fleet_otherValues <- read.csv("Fleet_otherValues.csv")
row.names(Fleet_otherValues) <- Fleet_otherValues$Name
# Read in operating models (OM) from Huynh et al 2020
OM_filenames_huynh <- list.files("OM/Huynh_etal_2020")
OM_names_huynh <- gsub(".rds","",OM_filenames_huynh)
OM_names_huynh_new <- paste0("OM_",gsub("_OM","",OM_names_huynh))
for(i in OM_filenames_huynh){
OM_i <- readRDS(paste0("OM/Huynh_etal_2020/",i))
OM_name_i <- paste0("OM_",gsub("_OM.rds","",i))
assign(OM_name_i,OM_i)
}
rm(OM_i)
# Get growth parameter data downloaded with rfishbase
if("D.Gro.csv"%in%list.files()){
D.Gro <- read.csv("D.Gro.csv")
}else{
D.Gro <- popgrowth(limit=11000) # Get growth parameters for all species available. Takes about 60 secs
write.csv(D.Gro,"D.Gro.csv",row.names = FALSE)
}
if("D.taxa.csv"%in%list.files()){
D.taxa <- read.csv("D.taxa.csv")
}else{
D.taxa <- load_taxa() # Load taxonomy data
write.csv(D.taxa,"D.taxa.csv",row.names = FALSE)
}
# Chunk 6: load bam data
bam_common_name <- unlist(str_extract_all(list.files(dir_bam_rdat),"^.*(?=(SEDAR))"))
bam_rdat_name <- paste("rdat",bam_common_name,sep="_")
# Get bam rdat lists
for(file_i in list.files(dir_bam_rdat)){
bam_common_name_i <- unlist(str_extract_all(file_i,"^.*(?=(SEDAR))"))
rdat_path_i <- file.path(dir_bam_rdat,file_i)
rdat_i <- dget(rdat_path_i)
rdat_name_i <- paste("rdat",bam_common_name_i,sep="_")
assign(rdat_name_i,rdat_i)
# Save rdat lists as RData files
save(list=rdat_name_i,file=file.path("bam_rdat_RData",paste0(rdat_name_i,".RData")))
}
rm("rdat_i")
# Chunk 7: user bam species
bam_common_name_sub <- c(
"BlackSeaBass",
"BluelineTilefish",
"Cobia",
"GagGrouper",
"GrayTriggerfish",
"GreaterAmberjack",
#"MenhadenAtl",
"RedGrouper",
"RedPorgy",
"RedSnapper",
"SnowyGrouper",
#"SpanishMackerel",
"Tilefish",
"VermilionSnapper"
)
bam_rdat_sub <- paste("rdat",bam_common_name_sub,sep="_")
# Chunk 9: build OM
# Stock_init <- new('Stock')
#
# # Initialize objects for saving computed values
# dep <- rec_AC <- A50 <- L50 <- setNames(rep(NA,length(bam_common_name_sub)),bam_common_name_sub)
for(rdat_name_i in bam_rdat_sub){
rdat_i <- get(rdat_name_i)
Data_name_i <- gsub("rdat","Data",rdat_name_i)
Data_i <- rdat_to_Data(rdat_i, Mat_age1_max=Mat_age1_max, length_sc = length_sc)
# This is to try to solve a problem that occurs later when running Simulate on OM_GreaterAmberjack that has something to do with CAL
# I think it might be occurring because there are length comps in a year with no age comps. Maybe. It doesn't occur with Cobia which also
# has CAL with values for only a single year.
if(Data_name_i=="Data_GreaterAmberjack"){
Data_i@CAL <- array(NA,c(1,1,1))
Data_i@CAL_bins <- as.numeric(NA)
Data_i@CAL_mids <- as.numeric(NA)
}
#Data_i@wla <- Data_i@wla*0.00220462 # Convert kg to klb
assign(Data_name_i,Data_i)
Stock_name_i <- gsub("rdat","Stock",rdat_name_i)
Stock_i <- rdat_to_Stock(rdat_i, Mat_age1_max=Mat_age1_max, length_sc = length_sc,
use_bam_R0 = use_bam_R0)
#Stock_i@a <- Stock_i@a*0.00220462 # Convert kg to klb
assign(Stock_name_i,Stock_i)
Fleet_name_i <- gsub("rdat","Fleet",rdat_name_i)
Fleet_i <- rdat_to_Fleet(rdat_i,Eff_sc=0.1 * c(-1, 1) + 1)
assign(Fleet_name_i,Fleet_i)
Obs_name_i <- gsub("rdat","Obs",rdat_name_i)
Obs_i <- get(Obs_name)
slot(Obs_i,"sigmaRbiascv") <- sigmaRbiascv
slot(Obs_i,"Eobs") <- Eobs
slot(Obs_i,"Ebiascv") <- Ebiascv
# # Set Iobs based on range of standard errors is residuals from fitting to indices in BAM
# Obs_i@Iobs <- local({
# t.series_i <- rdat_i$t.series
# U.ob.names <- names(t.series_i)[grepl("^U.*ob$",names(t.series_i))]
# root <- gsub("U.|.ob","",U.ob.names)
# U.pr.names <- paste0("U.",root,".pr")
# U.resid <- t.series_i[,U.ob.names]-t.series_i[,U.pr.names,drop=FALSE]
# round(range(apply(U.resid,2,function(x){sd(x,na.rm=TRUE)})),3)
#
# })
assign(Obs_name_i,Obs_i)
Imp_name_i <- gsub("rdat","Imp",rdat_name_i)
Imp_i <- get(Imp_name)
assign(Imp_name_i,Imp_i)
OM_i <- new("OM", Stock_i, Fleet_i, Obs_i, Imp_i)
OM_name_i <- gsub("rdat","OM",rdat_name_i)
# Fill OM slots
slot(OM_i,"Agency") <- Agency
slot(OM_i,"Region") <- Region
slot(OM_i,"Sponsor") <- Sponsor
slot(OM_i,"Latitude") <- Latitude
slot(OM_i,"Longitude") <- Longitude
slot(OM_i,"nsim") <- nsim
slot(OM_i,"proyears") <- proyears
slot(OM_i,"interval") <- interval
slot(OM_i,"pstar") <- pstar
slot(OM_i,"maxF") <- maxF
slot(OM_i,"reps") <- reps
cpars_i <- rdat_to_cpars(rdat_i, nsim=slot(OM_i,"nsim"), nyears=slot(OM_i,"nyears"), proyears=slot(OM_i,"proyears"),Mat_age1_max=Mat_age1_max)
cpars_i$D <- rep(mean(Stock_i@D),nsim)
cpars_i$Data <- Data_i
slot(OM_i,"cpars") <- cpars_i
assign(OM_name_i,OM_i)
rm(list=c("Data_i","Stock_i","Fleet_i","Obs_i","Imp_i"))
}
# Chunk 10: build OM VPA2OM
vec_to_mat <- function(vec){
matrix(vec,nrow=dim(naa)[2],ncol=dim(naa)[3],byrow=FALSE,
dimnames=dimnames(naa)[2:3])
}
mat_to_array <- function(mat,nsim){
mat_data <- rep(as.numeric(mat),each=nsim)
array(mat_data, dim=c(nsim,nrow(mat),ncol(mat)),
dimnames=list("sim"=1:nsim, "ages"=rownames(mat), "year"=colnames(mat)))
}
for(rdat_name_i in bam_rdat_sub){
rdat_i <- standardize_rdat(get(rdat_name_i))
Name_i <- gsub("rdat_","",rdat_name_i)
herm_i <- bamStockMisc[Name_i, "herm"]
OM2_name_i <- gsub("rdat","OM2",rdat_name_i)
a.series_i <- rdat_i$a.series
ageinit_i <- a.series_i$age
parms_i <- rdat_i$parms
parm.cons_i <- rdat_i$parm.cons
years_i <- paste(parms_i$styr:parms_i$endyr)
R0_i <- parms_i$BH.R0
Linf_i <- parm.cons_i$Linf[1]*length_sc
K_i <- parm.cons_i$K[1]
t0_i <- parm.cons_i$t0[1]
if(min(a.series_i$age)>0){
warning(paste(Name_i,": Minimum age > 0. Age-based data extrapolated to age-0"))
a.series_i <- data_polate(a.series_i,xout=0:max(a.series_i$age))
a.series_i <- data_lim(a.series_i,xlim=c(0,Inf))
a.series_i <- data_lim(a.series_i,xname=c("prop.female","prop.male","mat.female","mat.male"),xlim=c(0,1))
a.series_i <- as.data.frame(a.series_i)
rownames(a.series_i) <- a.series_i$age
}
age_i <- a.series_i$age
naa_mat <- cbind("age"=ageinit_i,t(rdat_i$N.age[years_i,]))
naa_mat2 <- data_polate(naa_mat,xout = age_i)
rownames(naa_mat2) <- age_i
naa <- mat_to_array(naa_mat2[,-1],nsim=nsim)
faa_mat <- cbind("age"=ageinit_i,t(rdat_i$F.age[years_i,]))
faa_mat2 <- data_polate(faa_mat,xout = age_i)
rownames(faa_mat2) <- age_i
faa_mat2[faa_mat2<0] <- 0 # Don't let F be negative
faa <- mat_to_array(faa_mat2[,-1],nsim=nsim)
mat_waa_klb <- matrix(a.series_i$wgt.klb,
nrow=dim(naa)[2],ncol=dim(naa)[3],byrow=FALSE,
dimnames=dimnames(naa)[2:3])
waa <- mat_to_array(mat_waa_klb,nsim=nsim)
mat_pmat <- matrix(pmatage(a.series_i,herm=herm_i)$pmat,
nrow=dim(naa)[2],ncol=dim(naa)[3],byrow=FALSE,
dimnames=dimnames(naa)[2:3])
Mataa <- mat_to_array(mat_pmat,nsim=nsim)
mat_M <- matrix(a.series_i$M,
nrow=dim(naa)[2],ncol=dim(naa)[3],byrow=FALSE,
dimnames=dimnames(naa)[2:3])
Maa <- mat_to_array(mat_M,nsim=nsim)
mat_laa <- matrix(a.series_i$length*length_sc,
nrow=dim(naa)[2],ncol=dim(naa)[3],byrow=FALSE,
dimnames=dimnames(naa)[2:3])
laa <- mat_to_array(mat_laa,nsim=nsim)
OM2_i <- VPA2OM(Name=Name_i,
CurrentYr = parms_i$endyr,
h=parms_i$BH.steep, R0=R0_i,
naa=naa, faa=faa, waa=waa, Mataa=Mataa, Maa=Maa, laa=laa)
OM2_i@cpars$K <- rep(K_i,nsim)
OM2_i@cpars$Linf <- rep(Linf_i,nsim)
OM2_i@cpars$t0 <- rep(t0_i,nsim)
# OM2_i@Size_area_1 <- c(1,0)
# OM2_i@Frac_area_1 <- c(1,0)
# OM2_i@Prob_staying <- c(1,0)
#
assign(OM2_name_i,OM2_i)
}
rdat_name_i
parm.cons_i$log_R0
parm.cons_i$log_R0[1]
exp(parm.cons_i$log_R0[1])
parms_i$BH.R0
10^(parm.cons_i$log_R0[1])
parm.cons_i$steep
parm.cons_i$K
exp(parm.cons_i$log_R0[8])
setwd("~/GitHub/myPackages/bamExtras")
source("~/GitHub/myPackages/bamExtras/update.package.bamExtras.r", echo=TRUE)
