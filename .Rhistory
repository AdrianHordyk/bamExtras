# Get names of all par in obj
#nm_obj_par <- setNames(lapply(nm_obj,function(x){names(ss[[x]])}),nm_obj)
# look for nm_par in each obj
for(nm_obj_i in nm_obj){
nm_par_obj_i <- names(ss[[nm_obj_i]])
if(nm_par%in%nm_par_obj_i){
parx <- if(nm_obj_i=="parm.cons"){
ss[[nm_obj_i]][[nm_par]][,8]
}else{
ss[[nm_obj_i]][[nm_par]]
}
}
}
# Compute delta likelihood for each column in like
y <- like[,grepl(like_pattern,names(like))]
yd <- apply(y,2,function(x){x-min(x)})
yd2 <- y-min(y)
y_plot <- switch(like_shift,
none=y,
min_par=yd,
min=yd2
)
ylab <- switch(like_shift,
none="like",
min_par="delta like (shift by par min)",
min="delta like (shift by all min)"
)
col <- rainbow(ncol(y),start=0,end=0.8)
do.call(par,par_args)
# Plot all likelihood profiles
matplot(parx,y_plot,type="l",xlab=nm_par,ylab=ylab,lty=1,lwd=2,col=col)
legend("top",legend=colnames(y_plot),col=col,lty=1,lwd=2,ncol=ceiling(ncol(y_plot)/10),bty="n")
# Plot grouped delta likelihood profiles
yg <- ydg <- yd2g <- matrix(NA,nrow=nrow(y),ncol=length(like_groups),dimnames=list(rownames(y),like_groups))
for(i in like_groups){
# lki <- paste0(like_pattern,i)
lki <- paste0("^lk.",i)
yg[,i] <- rowSums(y[,grepl(lki,dimnames(y)[[2]]),drop=FALSE])
}
yg <- yg[,colSums(yg)!=0,drop=FALSE]
ydg <- apply(yg,2,function(x){x-min(x)})
yd2g <- yg-min(yg)
yg_plot <- switch(like_shift,
none=yg,
min_par=ydg,
min=yd2g
)
colg <- rainbow(ncol(yg_plot),start=0,end=0.8)
matplot(parx,yg_plot,type="l",xlab=nm_par,ylab=ylab,lty=1,lwd=2,col=colg)
legend("top",legend=colnames(yg_plot),col=colg,lty=1,lwd=2,ncol=ceiling(ncol(yg_plot)/10),bty="n")
y
like_pattern = "^lk."
ss <- sim_summary
parms <- ss$parms
like <- ss$like
# Get names of all par in obj
#nm_obj_par <- setNames(lapply(nm_obj,function(x){names(ss[[x]])}),nm_obj)
# look for nm_par in each obj
for(nm_obj_i in nm_obj){
nm_par_obj_i <- names(ss[[nm_obj_i]])
if(nm_par%in%nm_par_obj_i){
parx <- if(nm_obj_i=="parm.cons"){
ss[[nm_obj_i]][[nm_par]][,8]
}else{
ss[[nm_obj_i]][[nm_par]]
}
}
}
# Compute delta likelihood for each column in like
y <- like[,grepl(like_pattern,names(like))]
yd <- apply(y,2,function(x){x-min(x)})
yd2 <- y-min(y)
y_plot <- switch(like_shift,
none=y,
min_par=yd,
min=yd2
)
ylab <- switch(like_shift,
none="like",
min_par="delta like (shift by par min)",
min="delta like (shift by all min)"
)
col <- rainbow(ncol(y),start=0,end=0.8)
do.call(par,par_args)
# Plot all likelihood profiles
matplot(parx,y_plot,type="l",xlab=nm_par,ylab=ylab,lty=1,lwd=2,col=col)
legend("top",legend=colnames(y_plot),col=col,lty=1,lwd=2,ncol=ceiling(ncol(y_plot)/10),bty="n")
# Plot grouped delta likelihood profiles
yg <- ydg <- yd2g <- matrix(NA,nrow=nrow(y),ncol=length(like_groups),dimnames=list(rownames(y),like_groups))
for(i in like_groups){
# lki <- paste0(like_pattern,i)
lki <- paste0("^lk.",i)
yg[,i] <- rowSums(y[,grepl(lki,dimnames(y)[[2]]),drop=FALSE])
}
yg <- yg[,colSums(yg)!=0,drop=FALSE]
ydg <- apply(yg,2,function(x){x-min(x)})
yd2g <- yg-min(yg)
yg_plot <- switch(like_shift,
none=yg,
min_par=ydg,
min=yd2g
)
colg <- rainbow(ncol(yg_plot),start=0,end=0.8)
matplot(parx,yg_plot,type="l",xlab=nm_par,ylab=ylab,lty=1,lwd=2,col=colg)
legend("top",legend=colnames(yg_plot),col=colg,lty=1,lwd=2,ncol=ceiling(ncol(yg_plot)/10),bty="n")
y
rowSums(y[,-1:-2])
rowSums(y[,-1:-2])-y$lk.total
rowSums(y[,-1:-2])/y$lk.total
like_groups = c("L","D","U","lenc","agec","SR"),
like_groups = c("L","D","U","lenc","agec","SR")
ss <- sim_summary
parms <- ss$parms
like <- ss$like
# Get names of all par in obj
#nm_obj_par <- setNames(lapply(nm_obj,function(x){names(ss[[x]])}),nm_obj)
# look for nm_par in each obj
for(nm_obj_i in nm_obj){
nm_par_obj_i <- names(ss[[nm_obj_i]])
if(nm_par%in%nm_par_obj_i){
parx <- if(nm_obj_i=="parm.cons"){
ss[[nm_obj_i]][[nm_par]][,8]
}else{
ss[[nm_obj_i]][[nm_par]]
}
}
}
# Compute delta likelihood for each column in like
y <- like[,grepl(like_pattern,names(like))]
yd <- apply(y,2,function(x){x-min(x)})
yd2 <- y-min(y)
y_plot <- switch(like_shift,
none=y,
min_par=yd,
min=yd2
)
ylab <- switch(like_shift,
none="like",
min_par="delta like (shift by par min)",
min="delta like (shift by all min)"
)
col <- rainbow(ncol(y),start=0,end=0.8)
do.call(par,par_args)
# Plot all likelihood profiles
matplot(parx,y_plot,type="l",xlab=nm_par,ylab=ylab,lty=1,lwd=2,col=col)
legend("top",legend=colnames(y_plot),col=col,lty=1,lwd=2,ncol=ceiling(ncol(y_plot)/10),bty="n")
# Plot grouped delta likelihood profiles
yg <- ydg <- yd2g <- matrix(NA,nrow=nrow(y),ncol=length(like_groups),dimnames=list(rownames(y),like_groups))
for(i in like_groups){
# lki <- paste0(like_pattern,i)
lki <- paste0("^lk.",i)
yg[,i] <- rowSums(y[,grepl(lki,dimnames(y)[[2]]),drop=FALSE])
}
yg <- yg[,colSums(yg)!=0,drop=FALSE]
ydg <- apply(yg,2,function(x){x-min(x)})
yd2g <- yg-min(yg)
yg_plot <- switch(like_shift,
none=yg,
min_par=ydg,
min=yd2g
)
colg <- rainbow(ncol(yg_plot),start=0,end=0.8)
matplot(parx,yg_plot,type="l",xlab=nm_par,ylab=ylab,lty=1,lwd=2,col=colg)
legend("top",legend=colnames(yg_plot),col=colg,lty=1,lwd=2,ncol=ceiling(ncol(yg_plot)/10),bty="n")
y
y[,!names(y)%in%c("lk.total","lk.unwgt.data")]
like_prop_exclude = c("lk.total","lk.unwgt.data")
a <- y[,!names(y)%in%like_prop_exclude]
a
rowSums(a)
a/rowSums(a)
rowSums(a/rowSums(a))
a
rowSums(a)
yg_prop <- local({
a <- yg[,!names(yg)%in%like_prop_exclude]
a/rowSums(a)
})
yg_prop
yg
a <- yg[,!names(yg)%in%like_prop_exclude]
a
!names(yg)%in%like_prop_exclude
names(yg)%in%like_prop_exclude
names(yg)
y <- like[,grepl(like_pattern,names(like))]
y_prop <- local({
a <- y[,!dimnames(y)[[2]]%in%like_prop_exclude]
a/rowSums(a)
})
y_prop
yg <- yg[,colSums(yg)!=0,drop=FALSE]
yg_prop <- local({
a <- yg[,!dimnames(yg)[[2]]%in%like_prop_exclude]
a/rowSums(a)
})
yg_prop
y_prop
rowSums(yg_prop)
y_prop_cumsum <- apply(y_prop,1,cumsum)
y_prop_cumsum
y_prop
yd <- t(apply(y,2,function(x){x-min(x)}))
y_prop_cumsum <- t(apply(y_prop,1,cumsum))
y_prop_cumsum
?barplot
source("~/GitHub/myPackages/bamExtras/R/plot_profile.R")
?gather
?pivot_longer
parx
y_prop
y
a <- cbind(data.frame("parx"=parx),y)
a
relig_income
library(tidyr)
relig_income
relig_income
relig_income %>%
pivot_longer(!religion, names_to = "income", values_to = "count")
pivot_longer(data=a,names_to = "par",values_to = "lk")
pivot_longer(data=a,cols=names(a),names_to = "par",values_to = "lk")
pivot_longer(data=a,cols=!parx,names_to = "par",values_to = "lk")
pivot_longer(data=a,cols=dimnames(y)[[2]][!dimnames(y)[[2]]%in%c("parx",like_prop_exclude)],names_to = "par",values_to = "lk")
pivot_longer(data=a,cols=!parx,names_to = "par",values_to = "lk")
a <- y[,!dimnames(y)[[2]]%in%like_prop_exclude]
b <- cbind(data.frame("parx"=parx),y)
pivot_longer(data=b,cols=!parx,names_to = "par",values_to = "lk")
a <- y[,!dimnames(y)[[2]]%in%like_prop_exclude]
b <- cbind(data.frame("parx"=parx),a)
pivot_longer(data=b,cols=!parx,names_to = "par",values_to = "lk")
names(b)
a <- y[,!dimnames(y)[[2]]%in%like_prop_exclude]
b <- cbind(data.frame("parx"=parx),a)
dimnames(b)[[2]] <- gsub("^lk.","",dimnames(y)[[2]])
pivot_longer(data=b,cols=!parx,names_to = "par",values_to = "lk")
a <- y[,!dimnames(y)[[2]]%in%like_prop_exclude]
b <- cbind(data.frame("parx"=parx),a)
dimnames(b)[[2]] <- gsub("^lk.","",dimnames(b)[[2]])
pivot_longer(data=b,cols=!parx,names_to = "par",values_to = "lk")
ggplot(ygg, aes(x = parx, y = lk)) + geom_area(position = 'stack')
ygg <- local({
a <- y[,!dimnames(y)[[2]]%in%like_prop_exclude]
b <- cbind(data.frame("parx"=parx),a)
dimnames(b)[[2]] <- gsub("^lk.","",dimnames(b)[[2]])
pivot_longer(data=b,cols=!parx,names_to = "par",values_to = "lk")
})
ggplot(ygg, aes(x = parx, y = lk)) + geom_area(position = 'stack')
ggplot(ygg, aes(x = parx, y = lk, fill=par)) + geom_area(position = 'stack')
nm_par
relig_income
relig_income %>%
pivot_longer(!religion, names_to = "income", values_to = "count")
ygg <- local({
a <- y[,!dimnames(y)[[2]]%in%like_prop_exclude]
b <- cbind(data.frame(nm_par=parx),a)
dimnames(b)[[2]] <- gsub("^lk.","",dimnames(b)[[2]])
pivot_longer(data=b,cols=!parx,names_to = "par",values_to = "lk")
})
a <- y[,!dimnames(y)[[2]]%in%like_prop_exclude]
b <- cbind(data.frame(nm_par=parx),a)
b
ggplot(ygg, aes(x = parx, y = lk, fill=par)) + geom_area(position = 'stack') + xlab(nm_par)
ggplot(ygg, aes(x = parx, y = lk, fill=par)) +
geom_area(position = 'stack') +
theme_classic +
xlab(nm_par)
ggplot(ygg, aes(x = parx, y = lk, fill=par)) +
geom_area(position = 'stack') +
theme_bw +
xlab(nm_par)
ggplot(ygg, aes(x = parx, y = lk, fill=par)) +
geom_area(position = 'stack') +
theme_classic() +
xlab(nm_par)
# Compute delta likelihood for each column in like
y <- like[,grepl(like_pattern,names(like))]
# y_prop <- local({
#   a <- y[,!dimnames(y)[[2]]%in%like_prop_exclude]
#   b <- a/rowSums(a)
# })
ygg <- local({
a <- y[,!dimnames(y)[[2]]%in%like_prop_exclude]
b <- cbind(data.frame("parx"=parx),a)
dimnames(b)[[2]] <- gsub("^lk.","",dimnames(b)[[2]])
pivot_longer(data=b,cols=!parx,names_to = "component",values_to = "lk")
})
yd <- apply(y,2,function(x){x-min(x)})
yd2 <- y-min(y)
y_plot <- switch(like_shift,
none=y,
min_par=yd,
min=yd2
)
ylab <- switch(like_shift,
none="like",
min_par="delta like (shift by par min)",
min="delta like (shift by all min)"
)
col <- rainbow(ncol(y),start=0,end=0.8)
do.call(par,par_args)
# Plot all likelihood profiles
matplot(parx,y_plot,type="l",xlab=nm_par,ylab=ylab,lty=1,lwd=2,col=col)
legend("top",legend=colnames(y_plot),col=col,lty=1,lwd=2,ncol=ceiling(ncol(y_plot)/10),bty="n")
ggplot(ygg, aes(x = parx, y = lk, fill=component)) +
geom_area(position = 'stack') +
theme_classic() +
xlab(nm_par)
ggplot(ygg, aes(x = parx, y = lk, fill=component)) +
geom_area(position = 'stack') +
theme_classic() +
ggtitle("stacked likelihood profiles") +
xlab(nm_par)
matplot(parx,y_plot,type="l",xlab=nm_par,ylab=ylab,lty=1,lwd=2,col=col)
legend("top",legend=colnames(y_plot),col=col,lty=1,lwd=2,ncol=ceiling(ncol(y_plot)/10),bty="n")
ggplot(ylong, aes(x = parx, y = lk, fill=component)) +
geom_area(position = 'stack') +
theme_classic() +
ggtitle("stacked likelihood profiles") +
xlab(nm_par)
ss <- sim_summary
parms <- ss$parms
like <- ss$like
# Get names of all par in obj
#nm_obj_par <- setNames(lapply(nm_obj,function(x){names(ss[[x]])}),nm_obj)
# look for nm_par in each obj
for(nm_obj_i in nm_obj){
nm_par_obj_i <- names(ss[[nm_obj_i]])
if(nm_par%in%nm_par_obj_i){
parx <- if(nm_obj_i=="parm.cons"){
ss[[nm_obj_i]][[nm_par]][,8]
}else{
ss[[nm_obj_i]][[nm_par]]
}
}
}
# Compute delta likelihood for each column in like
y <- like[,grepl(like_pattern,names(like))]
ylong <- local({
a <- y[,!dimnames(y)[[2]]%in%like_prop_exclude]
b <- cbind(data.frame("parx"=parx),a)
dimnames(b)[[2]] <- gsub("^lk.","",dimnames(b)[[2]])
pivot_longer(data=b,cols=!parx,names_to = "component",values_to = "lk")
})
yd <- apply(y,2,function(x){x-min(x)})
yd2 <- y-min(y)
y_plot <- switch(like_shift,
none=y,
min_par=yd,
min=yd2
)
ylab <- switch(like_shift,
none="like",
min_par="delta like (shift by par min)",
min="delta like (shift by all min)"
)
col <- rainbow(ncol(y),start=0,end=0.8)
do.call(par,par_args)
# Plot all likelihood profiles
matplot(parx,y_plot,type="l",xlab=nm_par,ylab=ylab,lty=1,lwd=2,col=col)
legend("top",legend=colnames(y_plot),col=col,lty=1,lwd=2,ncol=ceiling(ncol(y_plot)/10),bty="n")
ggplot(ylong, aes(x = parx, y = lk, fill=component)) +
geom_area(position = 'stack') +
theme_classic() +
ggtitle("stacked likelihood profiles") +
xlab(nm_par)
# Default plot
p <- ggplot(ToothGrowth, aes(x=dose, y=len)) + geom_boxplot() +
ggtitle("Plot of length \n by dose") +
xlab("Dose (mg)") + ylab("Teeth length")
p
# Change the color, the size and the face of
# the main title, x and y axis labels
p + theme(
plot.title = element_text(color="red", size=14, face="bold.italic"),
axis.title.x = element_text(color="blue", size=14, face="bold"),
axis.title.y = element_text(color="#993333", size=14, face="bold")
)
# Plot grouped delta likelihood profiles
yg <- ydg <- yd2g <- matrix(NA,nrow=nrow(y),ncol=length(like_groups),dimnames=list(rownames(y),like_groups))
yglong <- local({
a <- yg[,!dimnames(yg)[[2]]%in%like_prop_exclude]
b <- cbind(data.frame("parx"=parx),a)
dimnames(b)[[2]] <- gsub("^lk.","",dimnames(b)[[2]])
pivot_longer(data=b,cols=!parx,names_to = "component",values_to = "lk")
})
yglong
# Plot grouped delta likelihood profiles
yg <- ydg <- yd2g <- matrix(NA,nrow=nrow(y),ncol=length(like_groups),dimnames=list(rownames(y),like_groups))
for(i in like_groups){
# lki <- paste0(like_pattern,i)
lki <- paste0("^lk.",i)
yg[,i] <- rowSums(y[,grepl(lki,dimnames(y)[[2]]),drop=FALSE])
}
yg <- yg[,colSums(yg)!=0,drop=FALSE]
ydg <- apply(yg,2,function(x){x-min(x)})
yd2g <- yg-min(yg)
yg_plot <- switch(like_shift,
none=yg,
min_par=ydg,
min=yd2g
)
yglong <- local({
a <- yg[,!dimnames(yg)[[2]]%in%like_prop_exclude]
b <- cbind(data.frame("parx"=parx),a)
dimnames(b)[[2]] <- gsub("^lk.","",dimnames(b)[[2]])
pivot_longer(data=b,cols=!parx,names_to = "component",values_to = "lk")
})
yglong
ggplot(yglong, aes(x = parx, y = lk, fill=component)) +
geom_area(position = 'stack') +
theme_classic() +
ggtitle("stacked likelihood profiles") +
xlab(nm_par)
ggy <- ggplot(ylong, aes(x = parx, y = lk, fill=component)) +
geom_area(position = 'stack') +
theme_classic() +
ggtitle("stacked likelihood profiles") +
xlab(nm_par)
ggyg <- ggplot(yglong, aes(x = parx, y = lk, fill=component)) +
geom_area(position = 'stack') +
theme_classic() +
ggtitle("stacked likelihood profiles") +
xlab(nm_par)
library(gridExtra)
gridExtra::grid.arrange(ggy,ggyg)
gridExtra::grid.arrange(ggy,ggyg)
ss <- sim_summary
parms <- ss$parms
like <- ss$like
# Get names of all par in obj
#nm_obj_par <- setNames(lapply(nm_obj,function(x){names(ss[[x]])}),nm_obj)
# look for nm_par in each obj
for(nm_obj_i in nm_obj){
nm_par_obj_i <- names(ss[[nm_obj_i]])
if(nm_par%in%nm_par_obj_i){
parx <- if(nm_obj_i=="parm.cons"){
ss[[nm_obj_i]][[nm_par]][,8]
}else{
ss[[nm_obj_i]][[nm_par]]
}
}
}
# Compute delta likelihood for each column in like
y <- like[,grepl(like_pattern,names(like))]
ylong <- local({
a <- y[,!dimnames(y)[[2]]%in%like_prop_exclude]
b <- cbind(data.frame("parx"=parx),a)
dimnames(b)[[2]] <- gsub("^lk.","",dimnames(b)[[2]])
pivot_longer(data=b,cols=!parx,names_to = "component",values_to = "lk")
})
yd <- apply(y,2,function(x){x-min(x)})
yd2 <- y-min(y)
y_plot <- switch(like_shift,
none=y,
min_par=yd,
min=yd2
)
ylab <- switch(like_shift,
none="like",
min_par="delta like (shift by par min)",
min="delta like (shift by all min)"
)
col <- rainbow(ncol(y),start=0,end=0.8)
do.call(par,par_args)
# Plot all likelihood profiles
matplot(parx,y_plot,type="l",xlab=nm_par,ylab=ylab,lty=1,lwd=2,col=col)
legend("top",legend=colnames(y_plot),col=col,lty=1,lwd=2,ncol=ceiling(ncol(y_plot)/10),bty="n")
# Plot grouped delta likelihood profiles
yg <- ydg <- yd2g <- matrix(NA,nrow=nrow(y),ncol=length(like_groups),dimnames=list(rownames(y),like_groups))
for(i in like_groups){
# lki <- paste0(like_pattern,i)
lki <- paste0("^lk.",i)
yg[,i] <- rowSums(y[,grepl(lki,dimnames(y)[[2]]),drop=FALSE])
}
yg <- yg[,colSums(yg)!=0,drop=FALSE]
ydg <- apply(yg,2,function(x){x-min(x)})
yd2g <- yg-min(yg)
yg_plot <- switch(like_shift,
none=yg,
min_par=ydg,
min=yd2g
)
yglong <- local({
a <- yg[,!dimnames(yg)[[2]]%in%like_prop_exclude]
b <- cbind(data.frame("parx"=parx),a)
dimnames(b)[[2]] <- gsub("^lk.","",dimnames(b)[[2]])
pivot_longer(data=b,cols=!parx,names_to = "component",values_to = "lk")
})
colg <- rainbow(ncol(yg_plot),start=0,end=0.8)
matplot(parx,yg_plot,type="l",xlab=nm_par,ylab=ylab,lty=1,lwd=2,col=colg)
legend("top",legend=colnames(yg_plot),col=colg,lty=1,lwd=2,ncol=ceiling(ncol(yg_plot)/10),bty="n")
ggy <- ggplot(ylong, aes(x = parx, y = lk, fill=component)) +
geom_area(position = 'stack') +
theme_classic() +
ggtitle("stacked likelihood profiles") +
xlab(nm_par)
ggyg <- ggplot(yglong, aes(x = parx, y = lk, fill=component)) +
geom_area(position = 'stack') +
theme_classic() +
ggtitle("stacked likelihood profiles") +
xlab(nm_par)
gridExtra::grid.arrange(ggy,ggyg)
gridExtra::grid.arrange(ggy,ggyg)
source("~/GitHub/myPackages/bamExtras/R/plot_profile.R")
library(bamExtras)
exp(1)
exp(0)
exp(0.1)
exp(-1)
exp(-10)
setwd("~/GitHub/myPackages/bamExtras/TEST_FOLDER/comprehensive testing")
