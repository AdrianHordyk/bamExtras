xkni <- c(xkni_b,xkni_p)
}
xcvi <- init_b[[paste0("obs_cv_D_",abb_i)]]
SSxbi <- unlist(lapply(list(xni=xni,xkni=xkni
#xkwi=xkwi,xwi=xwi
),function(x){sum((x[yrsbi]-xbi)^2)}))
ndigi <- round(median(nchar(gsub("([0-9]*.)([0-9]*)","\\2",xbi))))
# ndigcvi <- round(median(nchar(gsub("([0-9]*.)([0-9]*)","\\2",xcvi))))
xpi <- round(get(names(SSxbi)[which.min(SSxbi)])[paste(yp)],ndigi)
# If the last year of xbi was the last year of the base model, then project it forward
if(paste(endyr)%in%names(xbi)){
xi <- c(xbi,xpi)
}else{
xi <- xbi
}
init_p[[nm_i]] <- setNames(paste(xi),names(xi))
# reset appropriate _endyr value to make sure it agrees with the projected data (some endyr values might get projected even if the data doesn't)
endyr_nm_i <- paste0("endyr_D_",abb_i)
if(endyr_nm_i%in%names(init_p)){init_p[[endyr_nm_i]] <- tail(names(xi),1)}
}
## set_log_dev_vals_F_D
init_set_log_dev_vals_F_D_nm <- names(init_b)[grepl("^set_log_dev_vals_F_D",names(init_b))]
for(nm_i in init_set_log_dev_vals_F_D_nm){
vals_b_i <- init_b[[nm_i]]
# If the value was provided in the last year of the base model, project it forward
if(paste(endyr)%in%names(vals_b_i)){
vals_p_i <- setNames(rep("0.0",nyp),yp)
vals_i <- c(vals_b_i,vals_p_i)
}else{
vals_i <- vals_b_i
}
init_p[[nm_i]] <- vals_i
}
## discard cvs
#  This is done in a separate loop because the discard cvs don't always match discard time series supplied to the dat file
#  (e.g. Black Sea Bass SEDAR 56)
init_obs_cv_D_nm <- names(init_b)[grepl("^obs_cv_D",names(init_b))]
for(nm_i in init_obs_cv_D_nm){
obs_cv_D_b_i <- init_b[[nm_i]]
# If the cv was provided in the last year of the base model, project it forward
if(paste(endyr)%in%names(obs_cv_D_b_i)){
obs_cv_D_p_i <- setNames(rep(bamExtras::geomean2(tail(obs_cv_D_b_i,nyb_rcn$L)),nyp),yp)
obs_cv_D_i <- c(obs_cv_D_b_i,obs_cv_D_p_i)
}else{
obs_cv_D_i <- obs_cv_D_b_i
}
init_p[[nm_i]] <- obs_cv_D_i
}
## cpue
init_obs_cpue_nm <- local({
nm <- names(init_b)[grepl("^obs_cpue",names(init_b))]
nm_abb <- gsub("^(obs_cpue)(_)(.*)","\\3",nm)
nm_yes <- nm[which(nm_abb%in%names(U))]
nm_no <- nm[which(!nm_abb%in%names(U))]
if(length(nm_no)>0){
message(paste(paste(nm_no,collapse=", "), "were found in the bam tpl but not in the rdat. They may not be included in the likelihood."))
}
# Only include names found in U (indices reported in the rdat)
return(nm_yes)
})
for(nm_i in init_obs_cpue_nm){
abb_i <- gsub("^(obs_cpue)(_)(.*)","\\3",nm_i)
xbi <- setNames(as.numeric(init_b[[nm_i]]),names(init_b[[nm_i]]))
yrsbi <- names(xbi)
xproji <- setNames(U[,abb_i],rownames(U))
xcvi <- init_b[[paste0("obs_cv_cpue_",abb_i)]]
ndigi <- round(median(nchar(gsub("([0-9]*.)([0-9]*)","\\2",xbi))))
ndigcvi <- round(median(nchar(gsub("([0-9]*.)([0-9]*)","\\2",xcvi))))
xpi <- round(xproji[paste(yp)],ndigi)
xi <- c(xbi,xpi[!is.na(xpi)])
yrsi <- names(xi)
init_p[[nm_i]] <- setNames(paste(xi),names(xi))
init_p[[paste0("obs_cv_cpue_",abb_i)]] <- setNames(paste(round(U_ts_cv[,paste0("cv.U.",abb_i)],ndigcvi)),rownames(U_ts_cv))[names(xi)]
# update styr, endyr, yrs, and nyr as necessary
yrinfoi <- setNames(list(min(yrsi),max(yrsi),yrsi,paste(length(yrsi))),
paste0(c("styr","endyr","yrs","nyr"),gsub("obs","",nm_i))
)
yrinfoi_nm_is <- names(yrinfoi)[names(yrinfoi)%in%names(init_p)]
init_p[yrinfoi_nm_is] <- yrinfoi[yrinfoi_nm_is]
}
## agec
init_obs_agec_nm <- names(init_b)[grepl("^obs_agec",names(init_b))]
init_obs_agec_nm_key <- setNames(names(acomp),
paste0("obs_agec_",gsub("^(D.)([A-Za-z]+)","\\2_D",gsub("^L.","",names(acomp)))))
for(nm_i in init_obs_agec_nm){
nm2_i <- init_obs_agec_nm_key[[nm_i]]
xbi <- init_b[[nm_i]]
x2bi <- acomp[[nm2_i]]
ndigi <- round(median(nchar(gsub("([0-9]*.)([0-9]*)","\\2",xbi))))
obsi <- apply(x2bi,2,function(x){sprintf(paste0("%.",ndigi,"f"), x)})
attributes(obsi) <- attributes(x2bi)
yrsi <- rownames(obsi)
init_p[[nm_i]] <- obsi
# update styr, endyr, yrs, and nyr as necessary
yrinfoi <- setNames(list(min(yrsi),max(yrsi),yrsi,paste(length(yrsi))),
paste0(c("styr","endyr","yrs","nyr"),gsub("obs","",nm_i))
)
yrinfoi_nm_is <- names(yrinfoi)[names(yrinfoi)%in%names(init_p)]
init_p[yrinfoi_nm_is] <- yrinfoi[yrinfoi_nm_is]
# update nfish and nsamp as necessary
nfish_nm_i <- gsub("obs","nfish",nm_i)
nsamp_nm_i <- gsub("obs","nsamp",nm_i)
nfishbi <- init_b[[nfish_nm_i]]
nsampbi <- init_b[[nsamp_nm_i]]
nfishpi <- setNames(rep(bamExtras::geomean2(nfishbi[paste(tail(yb,nyb_rcn$comp))]),nyp),paste(yp))
nsamppi <- setNames(rep(bamExtras::geomean2(nsampbi[paste(tail(yb,nyb_rcn$comp))]),nyp),paste(yp))
nfishdigi <- round(median(nchar(gsub("([0-9]*.)([0-9]*)","\\2",nfishbi))))
nsampdigi <- round(median(nchar(gsub("([0-9]*.)([0-9]*)","\\2",nsampbi))))
nfishi <- setNames(sprintf(paste0("%.",nfishdigi,"f"),round(as.numeric(c(nfishbi,nfishpi)))),names(c(nfishbi,nfishpi)))
nsampi <- setNames(sprintf(paste0("%.",nsampdigi,"f"),round(as.numeric(c(nsampbi,nsamppi)))),names(c(nsampbi,nsamppi)))
init_p[[nfish_nm_i]] <- nfishi[yrsi]
init_p[[nsamp_nm_i]] <- nsampi[yrsi]
}
## lenc
init_obs_lenc_nm <- names(init_b)[grepl("^obs_lenc",names(init_b))]
init_obs_lenc_nm_key <- setNames(names(lcomp),
paste0("obs_lenc_",gsub("^(D.)([A-Za-z]+)","\\2_D",gsub("^L.","",names(lcomp)))))
# for(nm_i in init_obs_lenc_nm){
#   nm2_i <- init_obs_lenc_nm_key[[nm_i]]
#   xbi <- init_b[[nm_i]]
#   x2bi <- lcomp[[nm2_i]]
#   ndigi <- round(median(nchar(gsub("([0-9]*.)([0-9]*)","\\2",xbi))))
#   obsi <- apply(x2bi,2,function(x){sprintf(paste0("%.",ndigi,"f"), x)})
#   dimnames(obsi) <- dimnames(x2bi)
#   yrsi <- rownames(obsi)
#   init_p[[nm_i]] <- obsi
#   # update styr, endyr, yrs, and nyr as necessary
#   yrinfoi <- setNames(list(min(yrsi),max(yrsi),yrsi,paste(length(yrsi))),
#                       paste0(c("styr","endyr","yrs","nyr"),gsub("obs","",nm_i))
#   )
#   yrinfoi_nm_is <- names(yrinfoi)[names(yrinfoi)%in%names(init_p)]
#   init_p[yrinfoi_nm_is] <- yrinfoi[yrinfoi_nm_is]
#
#   # update nfish and nsamp as necessary
#   nfish_nm_i <- gsub("obs","nfish",nm_i)
#   nsamp_nm_i <- gsub("obs","nsamp",nm_i)
#   nfishbi <- init_b[[nfish_nm_i]]
#   nsampbi <- init_b[[nsamp_nm_i]]
#   nfishdigi <- round(median(nchar(gsub("([0-9]*.)([0-9]*)","\\2",nfishbi))))
#   nsampdigi <- round(median(nchar(gsub("([0-9]*.)([0-9]*)","\\2",nsampbi))))
#   nfish2i <- setNames(sprintf(paste0("%.",nfishdigi,"f"), nfish[,paste0("lcomp.",nm2_i)]),rownames(nfish))
#   nsamp2i <- setNames(sprintf(paste0("%.",nsampdigi,"f"), ntrip[,paste0("lcomp.",nm2_i)]),rownames(ntrip))
#
#
#   init_p[[nfish_nm_i]] <- nfish2i[yrsi]
#   init_p[[nsamp_nm_i]] <- nsamp2i[yrsi]
# }
for(nm_i in init_obs_lenc_nm){
nm2_i <- init_obs_lenc_nm_key[[nm_i]]
xbi <- init_b[[nm_i]]
x2bi <- lcomp[[nm2_i]]
ndigi <- round(median(nchar(gsub("([0-9]*.)([0-9]*)","\\2",xbi))))
obsi <- apply(x2bi,2,function(x){sprintf(paste0("%.",ndigi,"f"), x)})
attributes(obsi) <- attributes(x2bi)
yrsi <- rownames(obsi)
init_p[[nm_i]] <- obsi
# update styr, endyr, yrs, and nyr as necessary
yrinfoi <- setNames(list(min(yrsi),max(yrsi),yrsi,paste(length(yrsi))),
paste0(c("styr","endyr","yrs","nyr"),gsub("obs","",nm_i))
)
yrinfoi_nm_is <- names(yrinfoi)[names(yrinfoi)%in%names(init_p)]
init_p[yrinfoi_nm_is] <- yrinfoi[yrinfoi_nm_is]
# update nfish and nsamp as necessary
nfish_nm_i <- gsub("obs","nfish",nm_i)
nsamp_nm_i <- gsub("obs","nsamp",nm_i)
nfishbi <- init_b[[nfish_nm_i]]
nsampbi <- init_b[[nsamp_nm_i]]
nfishpi <- setNames(rep(bamExtras::geomean2(nfishbi[paste(tail(yb,nyb_rcn$comp))]),nyp),paste(yp))
nsamppi <- setNames(rep(bamExtras::geomean2(nsampbi[paste(tail(yb,nyb_rcn$comp))]),nyp),paste(yp))
nfishdigi <- round(median(nchar(gsub("([0-9]*.)([0-9]*)","\\2",nfishbi))))
nsampdigi <- round(median(nchar(gsub("([0-9]*.)([0-9]*)","\\2",nsampbi))))
nfishi <- setNames(sprintf(paste0("%.",nfishdigi,"f"),round(as.numeric(c(nfishbi,nfishpi)))),names(c(nfishbi,nfishpi)))
nsampi <- setNames(sprintf(paste0("%.",nsampdigi,"f"),round(as.numeric(c(nsampbi,nsamppi)))),names(c(nsampbi,nsamppi)))
init_p[[nfish_nm_i]] <- nfishi[yrsi]
init_p[[nsamp_nm_i]] <- nsampi[yrsi]
}
bam_p <- bam2r(dat_obj=bam$dat,tpl_obj=bam$tpl,cxx_obj=bam$cxx,init=init_p)
}else{
bam_p <- NULL
} # end if(!is.null(bam2r_args))
# plot stuff
if(plot){
par(mfrow=c(2,2),mar=c(3,3,1,1),mgp=c(1,0.2,0),tck=-0.01)
# N
plot(as.numeric(names(Nsum)),Nsum,type="o")
abline(v=endyr)
# R
plot(as.numeric(names(R)),R,type="o")
abline(v=endyr)
# B
plot(as.numeric(names(Bsum)),Bsum,type="o")
abline(v=endyr)
# Fsum
plot(as.numeric(names(Fsum)),Fsum,type="o")
abline(v=endyr)
# Landings and discards
# Cn.L
p <- ggplot(Cn.L,mapping=aes(x=year,y=Ln))+
geom_area(aes(fill=fleet))+
theme_bw()+
scale_fill_brewer(palette="Spectral")+
stat_summary(fun = sum, geom = "line", size = 1)+
stat_summary(fun = sum, geom = "point", size = 2)+
geom_vline(xintercept = endyr, linetype="dashed", size = 0.3)
p2 <- p + geom_text(aes(x=endyr, label="endyr\n",y=max(Ln)), angle=90)
print(p2)
# Cn.D
if(nrow(Cn.D)>0){
p2 <- p %+% Cn.D + aes(y=Dn) +
geom_text(aes(x=endyr, label="endyr\n",y=max(Dn)), angle=90)
print(p2)
}
# Cw.L
p2 <- p %+% Cw.L + aes(y=Lw) +
geom_text(aes(x=endyr, label="endyr\n",y=max(Lw)), angle=90)
print(p2)
# Cw.D
if(nrow(Cw.D)>0){
p2 <- p %+% Cw.D + aes(y=Dw) +
geom_text(aes(x=endyr, label="endyr\n",y=max(Dw)), angle=90)
print(p2)
}
# cpue
matplot(as.numeric(rownames(U)),U,type="o",xlab="",xlim=c(styr,endyr+nyp),pch=1)
# matpoints(as.numeric(rownames(U_p)),U_p,type="o",pch=1)
legend("topleft",legend=colnames(U),col=1:ncol(U),lty=1:ncol(U),pch=1)
abline(v=endyr)
}
# Return results
U_p
library(bamExtras)
?run_proj
source("~/GitHub/myPackages/bamExtras/TEST_FOLDER/run_proj/run_proj_test.r", echo=TRUE)
setwd("~/GitHub/myPackages/bamExtras/TEST_FOLDER/run_proj_seq")
source("~/GitHub/myPackages/bamExtras/TEST_FOLDER/run_proj_seq/run_proj_seq_test.r", echo=TRUE)
source("~/GitHub/myPackages/bamExtras/TEST_FOLDER/run_proj_seq/run_proj_seq_test.r", echo=TRUE)
?switch
F_adjust <- function(data, U_nm, yr_ref, yr,
type = "Uprop"){
Ux <- data[,U_nm,drop=FALSE]
Uyr <- Ux[paste(yr),]
Uref <- Ux[paste(yr_ref),]
switch(type,
Uprop = function(Uyr,Uref){Uyr/Uref}
)
}
tser
rdat <- rdat_VermilionSnapper
aser <- rdat$a.series
tser <- rdat$t.series
yref <- "2016"
tser
tser$U.sTV.pr
tser[,"U.sTV.pr",drop=FALSE]
F_adjust(data=tser,U_nm="U.sTV.pr",yr_ref="2015",yr="2016")
F_adjust <- function(data, U_nm, yr_ref, yr,
type = "Uprop"){
Ux <- data[,U_nm,drop=FALSE]
Uyr <- Ux[paste(yr),]
Uref <- Ux[paste(yr_ref),]
switch(type,
Uprop = Uyr/Uref
)
}
F_adjust(data=tser,U_nm="U.sTV.pr",yr_ref="2015",yr="2016")
source("~/GitHub/myPackages/bamExtras/R/run_proj.r", echo=TRUE)
source("~/GitHub/myPackages/bamExtras/TEST_FOLDER/run_proj/run_proj_test.r", echo=TRUE)
source("~/GitHub/myPackages/bamExtras/TEST_FOLDER/run_proj/run_proj_test.r", echo=TRUE)
source("~/GitHub/myPackages/bamExtras/TEST_FOLDER/run_proj_seq/run_proj_seq_test.r", echo=TRUE)
warnings()
source("~/GitHub/myPackages/bamExtras/TEST_FOLDER/run_proj_seq/run_proj_seq_test.r", echo=TRUE)
source("~/GitHub/myPackages/bamExtras/TEST_FOLDER/run_proj_seq/run_proj_seq_test.r", echo=TRUE)
source("~/GitHub/myPackages/bamExtras/TEST_FOLDER/run_proj_seq/run_proj_seq_test.r", echo=TRUE)
library(bamExtras)
library(bamExtras)
source("~/GitHub/myPackages/bamExtras/R/plot_data_timeline.R")
#' Make a data timeline table from the BAM rdat output. Note: plot_data_timeline() uses the plot.matrix package
#' @param rdat (list) object read in with dget()
#' @param key_data_type_abb
#' @param key_fleet_abb
#' @param data_types
#' @keywords bam stock assessment fisheries population dynamics
#' @author Kyle Shertzer and Nikolai Klibansky
#' @export
#' @examples
#' \dontrun{
rdat <- rdat_GrayTriggerfish
### Data timeline plot Examples
# pdf(file.path("data-timeline.pdf"),width=12,height=5)
# par(mar=c(3,12,1,8),mgp=c(1,0.3,0),lend="butt",tck=0.01,las=2)
# plot_data_timeline(rdat)
# dev.off()
#
# pdf(file.path("data-timeline-comp.pdf"),width=12,height=2)
# par(mar=c(3,12,1,8),mgp=c(1,0.3,0),lend="butt",tck=0.01,las=2)
# plot_data_timeline(rdat,data_types = c("acomp","lcomp"))
# dev.off()
#' }
# Data input timeline
plot_data_timeline <- function(rdat,
key_data_type_abb=c("L"="landings",
"D"="discards",
"U"="index",
"acomp"="ageComp",
"lcomp"="lengthComp"),
key_fleet_abb=c("cHL"   = "com handline",
"cOT"   = "com other",
"cLL"   = "com longline",
"rGN"   = "rec general",
"rHB"   = "rec headboat",
"rHB_D" = "rec headboat discards",
"sTV"   = "SERFS trap video"),
data_types = c("L","U","acomp","lcomp")
){
library(plot.matrix)
t.ser <- rdat$t.series
t.ser.nm <- names(t.ser)
# Landings
L.nm <- t.ser.nm[substr(t.ser.nm,1,2)=="L." &
substr(t.ser.nm,nchar(t.ser.nm)-1,nchar(t.ser.nm))=="ob"]
# Discards
D.nm <- t.ser.nm[substr(t.ser.nm,1,2)=="D." &
substr(t.ser.nm,nchar(t.ser.nm)-1,nchar(t.ser.nm))=="ob"]
# Comps
acomp.nm <- t.ser.nm[substr(t.ser.nm,1,5)=="acomp" &
substr(t.ser.nm,nchar(t.ser.nm)-1,nchar(t.ser.nm))==".n"]
lcomp.nm <- t.ser.nm[substr(t.ser.nm,1,5)=="lcomp" &
substr(t.ser.nm,nchar(t.ser.nm)-1,nchar(t.ser.nm))==".n"]
# Indices
U.nm <- t.ser.nm[substr(t.ser.nm,1,2)=="U." &
substr(t.ser.nm,nchar(t.ser.nm)-1,nchar(t.ser.nm))=="ob"]
# Combine data
nm <- as.character(unlist(mget(paste(data_types,"nm",sep="."))))
t.ser2 <- t.ser[,nm]
t.ser2[t.ser2==-99999] <- NA
t.ser2.logical <- !is.na(t.ser2)
# data set where values are years
t.ser2.years <- apply(t.ser2.logical,2,function(x){
out <- rep(NA,length(x))
out[which(x)] <- as.numeric(rownames(t.ser2.logical)[x])
out
})
rownames(t.ser2.years) <- rownames(t.ser2)
fleetAbb <- unlist(strsplit(colnames(t.ser2.years),split=".",fixed=TRUE))[c(F,T,F)]
dataTypeAbb <- unlist(lapply(strsplit(colnames(t.ser2.years),split=".",fixed=TRUE),function(x){x[1]}))
fleetName <- key_fleet_abb[fleetAbb]
dataTypeName <- key_data_type_abb[dataTypeAbb]
colnames(t.ser2.years) <- paste(dataTypeName,fleetName)
# data set where values indicate cell color
t.ser2.fleet <- t.ser2.years
for(i in 1:ncol(t.ser2.fleet)){
x <- t.ser2.fleet[,i]
x[which(!is.na(x))] <- fleetName[i]
t.ser2.fleet[,i] <- x
}
# Plot using plot.matrix package
plot(t(t.ser2.fleet),xlab="",ylab="",col=rainbow,main="")
}
#' Make a data timeline table from the BAM rdat output. Note: plot_data_timeline() uses the plot.matrix package
#' @param rdat (list) object read in with dget()
#' @param key_data_type_abb
#' @param key_fleet_abb
#' @param data_types
#' @keywords bam stock assessment fisheries population dynamics
#' @author Kyle Shertzer and Nikolai Klibansky
#' @export
#' @examples
#' \dontrun{
rdat <- rdat_GrayTriggerfish
### Data timeline plot Examples
# pdf(file.path("data-timeline.pdf"),width=12,height=5)
# par(mar=c(3,12,1,8),mgp=c(1,0.3,0),lend="butt",tck=0.01,las=2)
# plot_data_timeline(rdat)
# dev.off()
#
# pdf(file.path("data-timeline-comp.pdf"),width=12,height=2)
# par(mar=c(3,12,1,8),mgp=c(1,0.3,0),lend="butt",tck=0.01,las=2)
# plot_data_timeline(rdat,data_types = c("acomp","lcomp"))
# dev.off()
#' }
# Data input timeline
plot_data_timeline <- function(rdat,
key_data_type_abb=c("L"="landings",
"D"="discards",
"U"="index",
"acomp"="ageComp",
"lcomp"="lengthComp"),
key_fleet_abb=c("cHL"   = "com handline",
"cOT"   = "com other",
"cLL"   = "com longline",
"rGN"   = "rec general",
"rHB"   = "rec headboat",
"rHB_D" = "rec headboat discards",
"sTV"   = "SERFS trap video"),
data_types = c("L","U","acomp","lcomp")
){
library(plot.matrix)
t.ser <- rdat$t.series
t.ser.nm <- names(t.ser)
# Landings
L.nm <- t.ser.nm[substr(t.ser.nm,1,2)=="L." &
substr(t.ser.nm,nchar(t.ser.nm)-1,nchar(t.ser.nm))=="ob"]
# Discards
D.nm <- t.ser.nm[substr(t.ser.nm,1,2)=="D." &
substr(t.ser.nm,nchar(t.ser.nm)-1,nchar(t.ser.nm))=="ob"]
# Comps
acomp.nm <- t.ser.nm[substr(t.ser.nm,1,5)=="acomp" &
substr(t.ser.nm,nchar(t.ser.nm)-1,nchar(t.ser.nm))==".n"]
lcomp.nm <- t.ser.nm[substr(t.ser.nm,1,5)=="lcomp" &
substr(t.ser.nm,nchar(t.ser.nm)-1,nchar(t.ser.nm))==".n"]
# Indices
U.nm <- t.ser.nm[substr(t.ser.nm,1,2)=="U." &
substr(t.ser.nm,nchar(t.ser.nm)-1,nchar(t.ser.nm))=="ob"]
# Combine data
nm <- as.character(unlist(mget(paste(data_types,"nm",sep="."))))
t.ser2 <- t.ser[,nm]
t.ser2[t.ser2==-99999] <- NA
t.ser2.logical <- !is.na(t.ser2)
# data set where values are years
t.ser2.years <- apply(t.ser2.logical,2,function(x){
out <- rep(NA,length(x))
out[which(x)] <- as.numeric(rownames(t.ser2.logical)[x])
out
})
rownames(t.ser2.years) <- rownames(t.ser2)
fleetAbb <- unlist(strsplit(colnames(t.ser2.years),split=".",fixed=TRUE))[c(F,T,F)]
dataTypeAbb <- unlist(lapply(strsplit(colnames(t.ser2.years),split=".",fixed=TRUE),function(x){x[1]}))
fleetName <- key_fleet_abb[fleetAbb]
dataTypeName <- key_data_type_abb[dataTypeAbb]
colnames(t.ser2.years) <- paste(dataTypeName,fleetName)
# data set where values indicate cell color
t.ser2.fleet <- t.ser2.years
for(i in 1:ncol(t.ser2.fleet)){
x <- t.ser2.fleet[,i]
x[which(!is.na(x))] <- fleetName[i]
t.ser2.fleet[,i] <- x
}
# Plot using plot.matrix package
plot(t(t.ser2.fleet),xlab="",ylab="",col=rainbow,main="")
}
library(bamExtras)
rdat <- rdat_GrayTriggerfish
### Data timeline plot Examples
# pdf(file.path("data-timeline.pdf"),width=12,height=5)
# par(mar=c(3,12,1,8),mgp=c(1,0.3,0),lend="butt",tck=0.01,las=2)
plot_data_timeline(rdat)
### Data timeline plot Examples
# pdf(file.path("data-timeline.pdf"),width=12,height=5)
par(mar=c(3,12,1,8),mgp=c(1,0.3,0),lend="butt",tck=0.01,las=2)
plot_data_timeline(rdat)
source("~/GitHub/myPackages/bamExtras/R/plot_data_timeline.R")
### Data timeline plot Examples
# pdf(file.path("data-timeline.pdf"),width=12,height=5)
par(mar=c(3,12,1,8),mgp=c(1,0.3,0),lend="butt",tck=0.01,las=2)
plot_data_timeline(rdat)
source("~/GitHub/myPackages/bamExtras/R/plot_data_timeline.R")
### Data timeline plot Examples
# pdf(file.path("data-timeline.pdf"),width=12,height=5)
par(mar=c(3,12,1,8),mgp=c(1,0.3,0),lend="butt",tck=0.01,las=2)
plot_data_timeline(rdat)
### Data timeline plot Examples
# pdf(file.path("data-timeline.pdf"),width=12,height=5)
par(mar=c(3,15,1,8),mgp=c(1,0.3,0),lend="butt",tck=0.01,las=2)
plot_data_timeline(rdat)
source("~/GitHub/myPackages/bamExtras/R/plot_data_timeline.R")
### Data timeline plot Examples
# pdf(file.path("data-timeline.pdf"),width=12,height=5)
par(mar=c(3,15,1,8),mgp=c(1,0.3,0),lend="butt",tck=0.01,las=2)
plot_data_timeline(rdat)
key_data_type_abb=c("L"="landings",
"D"="discards",
"U"="index",
"acomp"="ageComp",
"lcomp"="lengthComp");
key_fleet_abb=c("cHL"   = "com handline",
"cOT"   = "com other",
"cLL"   = "com longline",
"rGN"   = "rec general",
"rHB"   = "rec headboat",
"rHB.D" = "rec headboatdiscards",
"sTV"   = "SERFS trap video");
data_types = c("L","D","U","acomp","lcomp")
t.ser <- rdat$t.series
t.ser.nm <- names(t.ser)
# Landings
L.nm <- t.ser.nm[substr(t.ser.nm,1,2)=="L." &
substr(t.ser.nm,nchar(t.ser.nm)-1,nchar(t.ser.nm))=="ob"]
# Discards
D.nm <- t.ser.nm[substr(t.ser.nm,1,2)=="D." &
substr(t.ser.nm,nchar(t.ser.nm)-1,nchar(t.ser.nm))=="ob"]
# Comps
acomp.nm <- t.ser.nm[substr(t.ser.nm,1,5)=="acomp" &
substr(t.ser.nm,nchar(t.ser.nm)-1,nchar(t.ser.nm))==".n"]
lcomp.nm <- t.ser.nm[substr(t.ser.nm,1,5)=="lcomp" &
substr(t.ser.nm,nchar(t.ser.nm)-1,nchar(t.ser.nm))==".n"]
# Indices
U.nm <- t.ser.nm[substr(t.ser.nm,1,2)=="U." &
substr(t.ser.nm,nchar(t.ser.nm)-1,nchar(t.ser.nm))=="ob"]
# Combine data
nm <- as.character(unlist(mget(paste(data_types,"nm",sep="."))))
t.ser2 <- t.ser[,nm]
t.ser2[t.ser2==-99999] <- NA
t.ser2.logical <- !is.na(t.ser2)
# data set where values are years
t.ser2.years <- apply(t.ser2.logical,2,function(x){
out <- rep(NA,length(x))
out[which(x)] <- as.numeric(rownames(t.ser2.logical)[x])
out
})
rownames(t.ser2.years) <- rownames(t.ser2)
colnames(t.ser2.years)
unlist(strsplit(colnames(t.ser2.years),split=".",fixed=TRUE))[c(F,T,F)]
