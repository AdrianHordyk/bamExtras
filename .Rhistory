# FUN = mean,
# ylabel= expression(mean~(SSBMSY)),
# MPNamesSub = MPNamesSub_user,
# MPNamesSub_legtext=MPNamesSub_user_legtext,
# rowLabs=scenNames_key[scenNames_user]
# )
#
# # FMSY
# plot_MSE_ts(
# OMNames= OMNames, scenNames=scenNames_user,
# myvarName = expression(slot(out_i,"RefPoint")$FMSY[,,-(1:out_i@nyears)]),
# FUN = mean,
# ylabel= expression(mean~(FMSY)),
# MPNamesSub = MPNamesSub_user,
# MPNamesSub_legtext=MPNamesSub_user_legtext,
# rowLabs=scenNames_key[scenNames_user]
# )
#
# # UMSY
# plot_MSE_ts(
# OMNames= OMNames, scenNames=scenNames_user,
# myvarName = expression(F2U(slot(out_i,"RefPoint")$FMSY[,,-(1:out_i@nyears)])),
# FUN = mean,
# ylabel= expression(mean~(UMSY)),
# MPNamesSub = MPNamesSub_user,
# MPNamesSub_legtext=MPNamesSub_user_legtext,
# rowLabs=scenNames_key[scenNames_user]
# )
# Chunk 14: plot time series RE
# # VB
# plot_MSE_ts(
# OMNames= OMNames, scenNames=scenNames_user,
# myvarName = "VB",
# ylabel = expression(RE~(mean~(VB))),
# FUN = mean, MPNamesRef = "SCA_1",
# MPNamesSub = MPNamesSub_user,
# MPNamesSub_legtext=MPNamesSub_user_legtext,
# rowLabs=scenNames_key[scenNames_user]
# )
# SSB
plot_MSE_ts(
OMNames= OMNames, scenNames=scenNames_user,
myvarName = "SSB",
ylabel = expression(RE~(mean~(SBB))),
FUN = mean, MPNamesRef = "SCA_1",
MPNamesSub = MPNamesSub_user,
MPNamesSub_legtext=MPNamesSub_user_legtext,
rowLabs=scenNames_key[scenNames_user],
ylim=c(-0.5,0.5)
)
#
# # F
# plot_MSE_ts(
# OMNames= OMNames, scenNames=scenNames_user,
# myvarName = "FM",
# ylabel = expression(RE~(mean~(F))),
# FUN = mean, MPNamesRef = "SCA_1",
# MPNamesSub = MPNamesSub_user,
# MPNamesSub_legtext=MPNamesSub_user_legtext,
# rowLabs=scenNames_key[scenNames_user]
# )
#
# # TAC
# plot_MSE_ts(
# OMNames= OMNames, scenNames=scenNames_user,
# myvarName = "TAC",
# ylabel = expression(RE~(mean~(TAC))),
# FUN = mean, MPNamesRef = "SCA_1",
# MPNamesSub = MPNamesSub_user,
# MPNamesSub_legtext=MPNamesSub_user_legtext,
# rowLabs=scenNames_key[scenNames_user]
# )
# Catch
plot_MSE_ts(
OMNames= OMNames, scenNames=scenNames_user,
myvarName = "Catch",
ylabel = expression(RE~(mean~(Catch))),
FUN = mean, MPNamesRef = "SCA_1",
MPNamesSub = MPNamesSub_user,
MPNamesSub_legtext=MPNamesSub_user_legtext,
rowLabs=scenNames_key[scenNames_user],
ylim=c(-0.5,0.5)
)
# SSB/SSBmsy
plot_MSE_ts(
OMNames= OMNames, scenNames=scenNames_user,
myvarName = "SB_SBMSY",
ylabel = expression(RE~(mean~(SSB/SSBmsy))),
FUN = mean, MPNamesRef = "SCA_1",
MPNamesSub = MPNamesSub_user,
MPNamesSub_legtext=MPNamesSub_user_legtext,
rowLabs=scenNames_key[scenNames_user],
ylim=c(-0.5,0.5),
hline=NA
)
# F/Fmsy
plot_MSE_ts(
OMNames= OMNames, scenNames=scenNames_user,
myvarName = "F_FMSY",
ylabel = expression(RE~(mean~(F/Fmsy))),
FUN = mean, MPNamesRef = "SCA_1",
MPNamesSub = MPNamesSub_user,
rowLabs=scenNames_key[scenNames_user],
ylim=c(-1,1.5),
hline=NA
)
# C/MSY
plot_MSE_ts(
OMNames= OMNames, scenNames=scenNames_user,
myvarName = "Catch",
myvarDenomExpr = expression(slot(out_i,"RefPoint")$MSY[,,-(1:out_i@nyears)]),
ylabel = expression(RE~(mean~(Catch/MSY))),
FUN = mean, MPNamesRef = "SCA_1",
MPNamesSub = MPNamesSub_user,
MPNamesSub_legtext=MPNamesSub_user_legtext,
rowLabs=scenNames_key[scenNames_user],
ylim=c(-0.5,0.5)
)
#
# # TAC/MSY
# plot_MSE_ts(
#   OMNames= OMNames, scenNames=scenNames_user,
#   myvarName = "TAC",
#   myvarDenomExpr = expression(slot(out_i,"RefPoint")$MSY[,,-(1:out_i@nyears)]),
#   ylabel = expression(RE~(mean~(TAC/MSY))),
#   FUN = mean, MPNamesRef = "SCA_1",
#   ylim=c(0,2),
#   MPNamesSub = MPNamesSub_user,
#   MPNamesSub_legtext=MPNamesSub_user_legtext,
#   rowLabs=scenNames_key[scenNames_user],
#   ylim=c(-0.5,0.5),
#   hline=NA
# )
#
# # C/TAC
# plot_MSE_ts(
#   OMNames= OMNames, scenNames=scenNames_user,
#   myvarName = "Catch",
#   myvarDenomExpr = expression(slot(out_i,"TAC")),
#   ylabel = expression(RE~(mean~(C/TAC))),
#   FUN = mean, MPNamesRef = "SCA_1",
#   ylim=c(0,1.1),
#   MPNamesSub = MPNamesSub_user,
#   MPNamesSub_legtext=MPNamesSub_user_legtext,
#   rowLabs=scenNames_key[scenNames_user],
#   ylim=c(-0.5,0.5),
#   hline=NA
# )
#
# # MSY
# plot_MSE_ts(
#   OMNames= OMNames, scenNames=scenNames_user,
#   myvarName = expression(slot(out_i,"RefPoint")$MSY[,,-(1:out_i@nyears)]),
#   FUN = mean, MPNamesRef = "SCA_1",
#   ylabel= expression(RE~(mean~(MSY))),
#   MPNamesSub = MPNamesSub_user,
#   MPNamesSub_legtext=MPNamesSub_user_legtext,
#   rowLabs=scenNames_key[scenNames_user],
#   ylim=c(-0.5,0.5),
#   hline=NA
# )
#
# # SSBMSY
# plot_MSE_ts(
#   OMNames= OMNames, scenNames=scenNames_user,
#   myvarName = expression(slot(out_i,"RefPoint")$SSBMSY[,,-(1:out_i@nyears)]),
#   FUN = mean, MPNamesRef = "SCA_1",
#   ylabel= expression(RE~(mean~(SSBMSY))),
#   MPNamesSub = MPNamesSub_user,
#   MPNamesSub_legtext=MPNamesSub_user_legtext,
#   rowLabs=scenNames_key[scenNames_user],
#   ylim=c(-0.5,0.5),
#   hline=NA
# )
#
# # FMSY
# plot_MSE_ts(
#   OMNames= OMNames, scenNames=scenNames_user,
#   myvarName = expression(slot(out_i,"RefPoint")$FMSY[,,-(1:out_i@nyears)]),
#   FUN = mean, MPNamesRef = "SCA_1",
#   ylabel= expression(RE~(mean~(FMSY))),
#   MPNamesSub = MPNamesSub_user,
#   MPNamesSub_legtext=MPNamesSub_user_legtext,
#   rowLabs=scenNames_key[scenNames_user],
#   ylim=c(-0.5,0.5),
#   hline=NA
# )
#
# # UMSY
# plot_MSE_ts(
#   OMNames= OMNames, scenNames=scenNames_user,
#   myvarName = expression(F2U(slot(out_i,"RefPoint")$FMSY[,,-(1:out_i@nyears)])),
#   FUN = mean, MPNamesRef = "SCA_1",
#   ylabel= expression(RE~(mean~(UMSY))),
#   MPNamesSub = MPNamesSub_user,
#   MPNamesSub_legtext=MPNamesSub_user_legtext,
#   rowLabs=scenNames_key[scenNames_user],
#   ylim=c(-0.5,0.5),
#   hline=NA
# )
# Chunk 15: plot dot and whiskers
plot_MSE_dw(
OMNames= OMNames, scenNames=scenNames_user,
myvarName = "SSB",
ylabel = expression(cv~(SSB)),
FUN = cv,
MPNamesSub = MPNamesAll,
MPNamesSub_legtext=MPNamesAll_legtext,
rowLabs=scenNames_key[scenNames_user]
)
plot_MSE_dw(
OMNames= OMNames, scenNames=scenNames_user,
myvarName = "Catch",
myvarDenomExpr = expression(slot(out_i,"RefPoint")$MSY[,,-(1:out_i@nyears)]),
ylabel = expression(geomean~(Catch/MSY)),
FUN = geomean,
MPNamesSub = MPNamesAll,
MPNamesSub_legtext=MPNamesAll_legtext,
rowLabs=scenNames_key[scenNames_user],
ylim = c(0,1)
)
# Chunk 17: manual tradeoff plots
plot_MSE_ts(
OMNames= OMNames, scenNames=scenNames_user,
# MPNamesRef = "SCA_1",
plot_type = "tradeoff",
PMx = Yield,
MPNamesSub = MPNamesAll,
MPNamesSub_legtext=MPNamesAll,
rowLabs=scenNames_key[scenNames_user],
mar=c(0,0,0,0),label_axes="leftbottom",
xlim=c(0,1.1),ylim=c(0,1.1),
hline=NA
)
# Chunk 18
plot_MSE_ts(
OMNames= OMNames, scenNames=scenNames_user,
# MPNamesRef = "SCA_1",
plot_type = "tradeoff",
PMx = PNOF,
#proyear_phase=20,
MPNamesSub = MPNamesAll,
MPNamesSub_legtext=MPNamesAll,
rowLabs=scenNames_key[scenNames_user],
mar=c(0,0,0,0),label_axes="leftbottom",
xlim=c(0,1.1),ylim=c(0,1.1),
hline=NA
)
# Chunk 19: phase plots
plot_MSE_ts(
OMNames= OMNames, scenNames=scenNames_user,
MPNamesRef = "SCA_1",
plot_type = "phase",
#proyear_phase=20,
MPNamesSub = c(MPNamesSub_user),
MPNamesSub_legtext=c(MPNamesSub_user_legtext),
rowLabs=scenNames_key[scenNames_user],
mar=c(0,0,0,0),label_axes="leftbottom",
xlim=c(0,3),ylim=c(0,3),
hline=NA
)
getwd()
setwd("~/GitHub/myPackages/bamExtras")
setwd("~/GitHub/InterimAnalysis/SEFSCInterimAnalysis/RunMSE/SEFSC")
library(bamExtras)
View(rdat_to_Data())
View(rdat_to_Data)
class?Data
library(openMSE)
class?Data
Data <- rdat_to_Data(rdat_BlackSeaBass)
Data@LHYear
Data <- rdat_to_Data(rdat_BlackSeaBass)
LHYear = 2014; type="year
""
LHYear = 2014; type="year"
LHYear <- LHYear
Data@Year
nyr_rm = 2; type="year
nyr_rm = 2; type="year"
nyr_rm_ix <- seq(ncol(Data@Cat) - nyr_rm + 1, ncol(Data@Cat), 1)
nyr_rm_ix
yr_rm_ix
yr_rm_ix <- seq(ncol(Data@Cat) - nyr_rm + 1, ncol(Data@Cat), 1)
Data@Year[-yr_rm_ix]
yrm <- seq(ncol(Data@Cat) - nyr_rm + 1, ncol(Data@Cat), 1)
Data@Year <- Data@Year[-yrm]
Data@Cat <- Data@Cat[, -yrm, drop = FALSE]
Data@Cat
Data@CV_Cat[, -yrm, drop = FALSE]
source("~/GitHub/myPackages/bamExtras/R/rdat_to_Data.r", echo=TRUE)
Data <- rdat_to_Data(rdat_BlackSeaBass)
Data@CV_Cat[, -yrm, drop = FALSE]
Data@Effort
Data@Effort[, -yrm, drop = FALSE]
Data@CV_Effort[, -yrm, drop = FALSE]
Data@Ind[, -yrm, drop = FALSE]
Data@CV_Ind[, -yrm, drop = FALSE]
Data@SpInd[, -yrm, drop = FALSE]
Data@CV_SpInd[, -yrm, drop = FALSE]
Data@AddInd[, , -yrm, drop = FALSE]
Data@ML[, -yrm, drop = FALSE]
Data@Lc[, -yrm, drop = FALSE]
Data@CAA[, -yrm, , drop = FALSE]
Data@Year
Data@Year <- Data@Year[-yrm]
Data@Year
rev(Data@Year)[1]
Data@CAL[, -yrm, , drop = FALSE]
source("~/GitHub/myPackages/bamExtras/R/Data_sub_dim.r", echo=TRUE)
Data <- rdat_to_Data(rdat_BlackSeaBass)
source("~/GitHub/myPackages/bamExtras/R/Data_sub_dim.r", echo=TRUE)
tmp <- Data_sub_dim(Data,nyr_rm=2)
tmp <- Data_sub_dim(Data,nyr_rm=0)
SCA(tmp)
SCA(1,tmp)
?SCA
SCA(1,AddInd=1)
SCA(1,Data=Data,AddInd=1)
SCA(1,Data=tmp,AddInd=1)
library(bamExtras)
library(bamExtras)
?make_interim_MP
View(SCA)
View(SCA)
avai("Assess")
avail("Assess")
nk <- function(x=){mean(x)}
nk <- function(x=,y=2){mean(x)}
Data <- rdat_to_Data(rdat_BlackSeaBass)
Data_sub_dim(Data,1)
View(SCA_lag)
View(SCA)
View(SAMtool:::SCA_)
validcpars()
class?Data
library(bamExtras)
?lnorm_cv
library(bamExtras)
rdat <- rdat_VermilionSnapper
?lnorm_vector_boot
rdat <- rdat_VermilionSnapper
U <- rdat$t.series$U.cH.ob
cv_U <- rdat$t.series$cv.U.cH
lnorm_vector_boot(U,cv_U,10)
rdat <- rdat_VermilionSnapper
U <- rdat$t.series$U.cH.ob
cv_U <- rdat$t.series$cv.U.cH
boot_vec <- lnorm_vector_boot(U,cv_U,10)
plot_boot_vec(boot_vec)
U_boot <- lnorm_vector_boot(U,cv_U,100)
plot_boot_vec(boot_vec)
plot_boot_vec(U_boot)
plot(U)
plot_boot_vec(t(U_boot))
plot_boot_vec(t(U_boot))
points(U,type="o")
points(U,type="o",col="blue")
library(bamExtras)
library(bamExtras)
library(bamExtras)
library(bamExtras)
library(bamExtras)
library(bamExtras)
col2rgb("blue")
rgb(col2rgb("blue"))
rgb(unlist(col2rgb("blue")))
?rgb
col_lines <- c("red","blue")
col2rgb(col_lines)
plot_boot_vec <- function(data,
CIpct = 95,
runsToKeep=NULL,
ref_x=NULL,
ref_y=NULL,
col_lines=rgb(0,0,0,1),
col_shade=NULL,
add=FALSE,
...){
if(is.null(runsToKeep)){
runsToKeep <- 1:nrow(data)
}
if(is.null(col_shade)){
col_lines
col_shade <- color_trans(col_lines)
}
CItail <- ((100-CIpct)/2)/100
#par(mar=c(2,2,2,1),mgp=c(1,.2,0),cex.lab=1,cex.axis=1,cex=1.5,tck=-0.02)
data2 <- t(data[runsToKeep,])
y.median <- apply(X=data2,MARGIN=1,FUN=quantile,probs=0.5,na.rm=TRUE)
y.lo <- apply(X=data2,MARGIN=1,FUN=quantile,probs=CItail,na.rm=TRUE)
y.up <- apply(X=data2,MARGIN=1,FUN=quantile,probs=1-CItail,na.rm=TRUE)
y <- data.frame(y.median,y.lo,y.up)
x <- as.numeric(rownames(y))
# draw empty plot
if(!add){
matplot(x,y,type="n",...)
grid(lty=1,col="gray80")
}
## draw confidence bands as shaded region
# Identify groups of continuous years for plotting polygons correctly
group <- rep(0,nrow(y))
for(i in 1:nrow(y))
{
if(complete.cases(y[i,])) # If test i is true
{
if(i==1) # if i=1 then this is group 1
{
group[i] <- 1
}
if(i>1){ # if i>1
if(complete.cases(y[i-1,])) # If test i-1 is true
{
group[i] <- group[i-1]
}else{
group[i] <- max(group)+1
}
}
}
}
y$group <- group
ycc <- y[complete.cases(y),]
for(group.i in 1:max(ycc$group)){
ycc.group.i <-  ycc[ycc$group==group.i,]
polygon(x=c(rownames(ycc.group.i),rev(rownames(ycc.group.i))),y=c(ycc.group.i[,2],rev(ycc.group.i[,3])),col=col_shade,border=col_shade,lwd=2)
}
# draw median and confidence band lines
matpoints(rownames(y),y[,c(1,2,3)],type="l",lwd=c(2,1,1),lty=c(2,1,1),col="black")
# draw reference lines (e.g. base run)
if(!is.null(ref_x)&!is.null(ref_y)){
points(ref_x,ref_y,type="o",lty=1,lwd=3,pch=16,col="black")
}
legend("topright",legend=paste("error bands represent ",CIpct,"% CI",sep=""),bty="n",cex=0.75)
}
bootData <- t(replicate(n=100,random_walk(mu=0.5)))
plot_boot_vec(bootData)
plot_boot_vec(bootData,col_lines=rgb(1,0,0))
plot_boot_vec <- function(data,
CIpct = 95,
runsToKeep=NULL,
ref_x=NULL,
ref_y=NULL,
col_lines=rgb(0,0,0,1),
col_shade=NULL,
add=FALSE,
...){
if(is.null(runsToKeep)){
runsToKeep <- 1:nrow(data)
}
if(is.null(col_shade)){
col_lines
col_shade <- color_trans(col_lines)
}
CItail <- ((100-CIpct)/2)/100
#par(mar=c(2,2,2,1),mgp=c(1,.2,0),cex.lab=1,cex.axis=1,cex=1.5,tck=-0.02)
data2 <- t(data[runsToKeep,])
y.median <- apply(X=data2,MARGIN=1,FUN=quantile,probs=0.5,na.rm=TRUE)
y.lo <- apply(X=data2,MARGIN=1,FUN=quantile,probs=CItail,na.rm=TRUE)
y.up <- apply(X=data2,MARGIN=1,FUN=quantile,probs=1-CItail,na.rm=TRUE)
y <- data.frame(y.median,y.lo,y.up)
x <- as.numeric(rownames(y))
# draw empty plot
if(!add){
matplot(x,y,type="n",...)
grid(lty=1,col="gray80")
}
## draw confidence bands as shaded region
# Identify groups of continuous years for plotting polygons correctly
group <- rep(0,nrow(y))
for(i in 1:nrow(y))
{
if(complete.cases(y[i,])) # If test i is true
{
if(i==1) # if i=1 then this is group 1
{
group[i] <- 1
}
if(i>1){ # if i>1
if(complete.cases(y[i-1,])) # If test i-1 is true
{
group[i] <- group[i-1]
}else{
group[i] <- max(group)+1
}
}
}
}
y$group <- group
ycc <- y[complete.cases(y),]
for(group.i in 1:max(ycc$group)){
ycc.group.i <-  ycc[ycc$group==group.i,]
polygon(x=c(rownames(ycc.group.i),rev(rownames(ycc.group.i))),y=c(ycc.group.i[,2],rev(ycc.group.i[,3])),col=col_shade,border=col_shade,lwd=2)
}
# draw median and confidence band lines
matpoints(rownames(y),y[,c(1,2,3)],type="l",lwd=c(2,1,1),lty=c(2,1,1),col=col_lines)
# draw reference lines (e.g. base run)
if(!is.null(ref_x)&!is.null(ref_y)){
points(ref_x,ref_y,type="o",lty=1,lwd=3,pch=16,col=col_lines)
}
legend("topright",legend=paste("error bands represent ",CIpct,"% CI",sep=""),bty="n",cex=0.75)
}
plot_boot_vec(bootData,col_lines=rgb(1,0,0))
plot_boot_vec(bootData,col_lines=rgb(1,0.5,0))
plot_boot_vec(bootData,col_lines=rgb(1,0.5,0.1))
plot_boot_vec(bootData,col_lines=rgb(1,0.5,0.5))
plot_boot_vec(bootData,col_lines=rgb(1,0.5,1))
plot_boot_vec(bootData,col_lines=rgb(1,0.5,1,0.4))
plot_boot_vec(bootData,col_lines=rgb(1,0.5,1,0.1))
plot_boot_vec(bootData,col_lines=rgb(1,0.5,1,0.01))
library(bamExtras)
library(bamExtras)
library(bamExtras)
